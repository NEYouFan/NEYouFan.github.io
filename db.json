{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/Jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/Jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/Jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/Jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1483514678000},{"_id":"source/.DS_Store","hash":"de00a52bf1604da4bd271c78a578ca74c4f19d1a","modified":1483515777000},{"_id":"themes/Jacman/README.md","hash":"75a5c9fbd7c9cec4d2f277042d2fee550e4936be","modified":1483514678000},{"_id":"themes/Jacman/README_zh.md","hash":"d6014b16eaccc97dc54a7779c9e36003752410e1","modified":1483514678000},{"_id":"themes/Jacman/_config.yml","hash":"558731fea51575250b313a0c77bf6a504d7170f4","modified":1483514678000},{"_id":"source/_posts/hello-world.md","hash":"b4808dc3e6ec5ede792f314cc2582e13f88328bf","modified":1483592175000},{"_id":"themes/Jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1483514678000},{"_id":"themes/Jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1483514678000},{"_id":"themes/Jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1483514678000},{"_id":"themes/Jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1483514678000},{"_id":"themes/Jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1483514678000},{"_id":"themes/Jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1483514678000},{"_id":"themes/Jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1483514678000},{"_id":"themes/Jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1483514678000},{"_id":"themes/Jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1483514678000},{"_id":"themes/Jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1483514678000},{"_id":"themes/Jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/footer.ejs","hash":"09fa1b4d99db4a548ab981ca3724c827034cc19e","modified":1483591933000},{"_id":"themes/Jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1483587083000},{"_id":"themes/Jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/weibo.ejs","hash":"70cfd82a1a4fc3e759abf5f20325ca655559744f","modified":1483587224000},{"_id":"themes/Jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1483514678000},{"_id":"themes/Jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483514678000},{"_id":"themes/Jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1483514678000},{"_id":"themes/Jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1483514678000},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1483514678000},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1483514678000},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1483514678000},{"_id":"themes/Jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1483514678000},{"_id":"themes/Jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1483514678000},{"_id":"themes/Jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1483514678000},{"_id":"themes/Jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1483514678000},{"_id":"themes/Jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1483514678000},{"_id":"themes/Jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1483514678000},{"_id":"themes/Jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1483514678000},{"_id":"themes/Jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1483514678000},{"_id":"themes/Jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1483514678000},{"_id":"themes/Jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1483514678000},{"_id":"themes/Jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1483514678000},{"_id":"themes/Jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1483514678000},{"_id":"themes/Jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1483514678000},{"_id":"themes/Jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1483514678000},{"_id":"themes/Jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1483514678000},{"_id":"themes/Jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1483514678000},{"_id":"themes/Jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1483514678000},{"_id":"themes/Jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1483514678000},{"_id":"themes/Jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/post/article.ejs","hash":"f4a076a8520d37b1be80b4e6ed560f379a141adb","modified":1483592175000},{"_id":"themes/Jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1483514678000},{"_id":"themes/Jacman/layout/_partial/post/header.ejs","hash":"f825562e2c9a6753dbacb99f1dcfaa93b73ca7b4","modified":1483525922000},{"_id":"themes/Jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1483514678000},{"_id":"themes/Jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1483514678000},{"_id":"themes/Jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1483514678000},{"_id":"themes/Jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483514678000},{"_id":"themes/Jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1483514678000},{"_id":"themes/Jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1483514678000},{"_id":"themes/Jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1483514678000},{"_id":"themes/Jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1483514678000},{"_id":"themes/Jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1483514678000}],"Category":[{"name":"ios","_id":"cixjwh4yd00007e8lq4jj405o"}],"Data":[],"Page":[],"Post":[{"title":"关于LLVM，这些东西你必须要知道","date":"2016-12-28T16:00:00.000Z","author":"test","url":"www.baidu.com","list_number":true,"_content":"只要你和代码打交道，了解编译器的工作流程和原理定会让你受益无穷，无论是分析程序，还是基于它写自己的插件，甚至学习一门全新的语音。通过本文，将带你了解LLVM，并使用LLVM来完成一些有意思的事情。<!-- more -->\n\n## 1. 什么是LLVM？\n\n>The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.\n\n简单来说，LLVM项目是一系列分模块、可重用的编译工具链。它提供了一种代码编写良好的中间表示(IR)，可以作为多种语言的后端，还可以提供与变成语言无关的优化和针对多种cpu的代码生成功能。\n\n先来看下LLVM架构的主要组成部分：\n\n* 前端：前端用来获取源代码然后将它转变为某种中间表示，我们可以选择不同的编译器来作为LLVM的前端，如gcc，clang。\n* Pass(通常翻译为“流程”)：Pass用来将程序的中间表示之间相互变换。一般情况下，Pass可以用来优化代码，这部分通常是我们关注的部分。\n* 后端：后端用来生成实际的机器码。\n\n虽然如今大多数编译器都采用的是这种架构，但是LLVM不同的就是对于不同的语言它都提供了同一种中间表示。传统的编译器的架构如下:\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136450962.png\"/></center>\n\nLLVM的架构如下：\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136601642.png\"/></center>\n\n当编译器需要支持多种源代码和目标架构时，基于LLVM的架构，设计一门新的语言只需要去实现一个新的前端就行了，支持新的后端架构也只需要实现一个新的后端就行了。其它部分完成可以复用，就不用再重新设计一次了。\n\n## 2. 安装编译LLVM\n\n这里使用clang作为前端:\n\n1. 直接从官网下载:[http://releases.llvm.org/download.html\n](http://releases.llvm.org/download.html)\n\n2. svn获取\n\n```\nsvn co http://llvm.org/svn/llvm-project/llvm/trunk llvm\ncd llvm/tools\nsvn co http://llvm.org/svn/llvm-project/cfe/trunk clang\ncd ../projects\nsvn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt\ncd ../tools/clang/tools\nsvn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra\n```\n\n3. git获取\n\n```\ngit clone http://llvm.org/git/llvm.git\ncd llvm/tools\ngit clone http://llvm.org/git/clang.git\ncd ../projects\ngit clone http://llvm.org/git/compiler-rt.git\ncd ../tools/clang/tools\ngit clone http://llvm.org/git/clang-tools-extra.git\n```\n\n最新的LLVM只支持cmake来编译了，首先安装cmake。\n\n```\nbrew install cmake\n```\n\n编译：\n\n```\nmkdir build\ncmake /path/to/llvm/source\ncmake --build .\n```\n\n编译时间比较长，而且编译结果会生成20G左右的文件。\n\n编译完成后，就能在`build/bin/`目录下面找到生成的工具了。\n\n## 3. 从源码到可执行文件\n\n我们在开发的时候的时候，如果想要生成一个可执行文件或应用，我们点击run就完事了，那么在点击run之后编译器背后又做了哪些事情呢？\n\n我们先来一个例子：\n\n```\n#import <Foundation/Foundation.h>\n\n#define TEN 10\n\nint main(){\n    @autoreleasepool {\n        int numberOne = TEN;\n        int numberTwo = 8;\n        NSString* name = [[NSString alloc] initWithUTF8String:\"AloneMonkey\"];\n        int age = numberOne + numberTwo;\n        NSLog(@\"Hello, %@, Age: %d\", name, age);\n    }\n    return 0;\n}\n```\n\n上面这个文件，我们可以通过命令行直接编译，然后链接：\n\n```\nxcrun -sdk iphoneos clang -arch armv7 -F Foundation -fobjc-arc -c main.m -o main.o\nxcrun -sdk iphoneos clang main.o -arch armv7 -fobjc-arc -framework Foundation -o main\n```\n\n拷贝到手机运行：\n\n```\nmonkeyde-iPhone:/tmp root# ./main\n2016-12-19 17:16:34.654 main[2164:213100] Hello, AloneMonkey, Age: 18\n```\n\n大家不会以为就这样就完了吧，当然不是，我们要继续深入剖析。\n\n### 3.1 预处理（Preprocess）\n\n这部分包括macro宏的展开，import/include头文件的导入，以及#if等处理。\n\n\n可以通过执行以下命令，来告诉clang只执行到预处理这一步：\n\n```\nclang -E main.m\n```\n\n执行完这个命令之后，我们会发现导入了很多的头文件内容。\n\n```\n......\n# 1 \"/System/Library/Frameworks/Foundation.framework/Headers/FoundationLegacySwiftCompatibility.h\" 1 3\n# 185 \"/System/Library/Frameworks/Foundation.framework/Headers/Foundation.h\" 2 3\n# 2 \"main.m\" 2\n\nint main(){\n    @autoreleasepool {\n        int numberOne = 10;\n        int numberTwo = 8;\n        NSString* name = [[NSString alloc] initWithUTF8String:\"AloneMonkey\"];\n        int age = numberOne + numberTwo;\n        NSLog(@\"Hello, %@, Age: %d\", name, age);\n    }\n    return 0;\n}\n```\n\n可以看到上面的预处理已经把宏替换了，并且导入了头文件。但是这样的话会引入很多不会去改变的系统库比如Foundation，所以有了pch预处理文件，可以在这里去引入一些通用的头文件。\n\n后来Xcode新建的项目里面去掉了pch文件，引入了moduels的概念，把一些通用的库打成modules的形式，然后导入，默认会加上-fmodules参数。\n\n```\nclang -E -fmodules main.m\n```\n\n这样的话，只需要@import一下就能导入对应库的modules模块了。\n\n```\n@import Foundation; \nint main(){\n    @autoreleasepool {\n        int numberOne = 10;\n        int numberTwo = 8;\n        NSString* name = [[NSString alloc] initWithUTF8String:\"AloneMonkey\"];\n        int age = numberOne + numberTwo;\n        NSLog(@\"Hello, %@, Age: %d\", name, age);\n    }\n    return 0;\n}\n```\n\n### 3.2 词法分析 (Lexical Analysis)\n\n在预处理之后，就要进行词法分析了，将预处理过的代码转化成一个个Token，比如左括号、右括号、等于、字符串等等。\n\n\n```\nclang -fmodules -fsyntax-only -Xclang -dump-tokens main.m\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994028068.png)\n\n### 3.3 语法分析 (Semantic Analysis)\n\n根据当前语言的语法，验证语法是否正确，并将所有节点组合成抽象语法树(AST)\n\n```\nclang -fmodules -fsyntax-only -Xclang -ast-dump main.m\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994071651.png)\n\n语法树直观图:\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482150626825.png)\n\n\n### 3.4 IR代码生成 (CodeGen)\n\nCodeGen负责将语法树从顶至下遍历，翻译成LLVM IR，LLVM IR是Frontend的输出，也是LLVM Backerend的输入，桥接前后端。\n\n可以在中间代码层次去做一些优化工作，我们在Xcode的编译设置里面也可以设置优化级别`-O1`,`-O3`,`-Os`。 还可以去写一些自己的Pass，这里需要解释一下什么是Pass。\n\nPass就是LLVM系统转化和优化的工作的一个节点，每个节点做一些工作，这些工作加起来就构成了LLVM整个系统的优化和转化。\n\n```\nclang -S -fobjc-arc -emit-llvm main.m -o main.ll\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994093995.png)\n\n\n### 3.5 生成字节码 (LLVM Bitcode)\n\n我们在Xcode7中默认生成bitcode就是这种的中间形式存在， 开启了bitcode，那么苹果后台拿到的就是这种中间代码，苹果可以对bitcode做一个进一步的优化，如果有新的后端架构，仍然可以用这份bitcode去生成。\n\n```\nclang -emit-llvm -c main.m -o main.bc\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218230417.png)\n\n### 生成相关汇编\n\n```\nclang -S -fobjc-arc main.m -o main.s\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994171109.png)\n\n\n### 生成目标文件\n\n```\nclang -fmodules -c main.m -o main.o\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218636504.png)\n\n### 生成可执行文件\n\n```\nclang main.o -o main\n./main\n```\n\n```\n2016-12-20 15:25:42.299 main[8941:327306] Hello, AloneMonkey, Age: 18\n```\n\n### 整体流程\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482219005958.png)\n\n## 可以用Clang做什么？\n\n### libclang进行语法分析\n\n可以使用libclang里面提供的方法对源文件进行语法分析，分析它的语法树，遍历语法树上面的每一个节点。可以用于检查拼写错误，或者做字符串加密。\n\n来看一段代码的使用：\n\n```\nvoid *hand = dlopen(\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib\",RTLD_LAZY);\n        \n//初始化函数指针\ninitlibfunclist(hand);\n\nCXIndex cxindex = myclang_createIndex(1, 1);\n\nconst char *filename = \"/path/to/filename\";\n\nint index = 0;\n\nconst char ** new_command = malloc(10240);\n\nNSMutableString *mus = [NSMutableString stringWithString:@\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch armv7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk\"]; \n\nNSArray *arr = [mus componentsSeparatedByString:@\" \"];\n\nfor (NSString *tmp in arr) {\n    new_command[index++] = [tmp UTF8String];\n}\n\nnameArr = [[NSMutableArray alloc] initWithCapacity:10];\n\nTU = myclang_parseTranslationUnit(cxindex, filename, new_command, index, NULL, 0, myclang_defaultEditingTranslationUnitOptions());\n\nCXCursor rootCursor = myclang_getTranslationUnitCursor(TU);\n\nmyclang_visitChildren(rootCursor, printVisitor, NULL);\n\nmyclang_disposeTranslationUnit(TU);\nmyclang_disposeIndex(cxindex);\nfree(new_command);\n\ndlclose(hand);\n```\n\n然后我们就可以在`printVisitor`这个函数里面去遍历输入文件的语法树了。\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994195691.png)\n\n\n我们也通过通过python去调用用clang：\n\n```\npip install clang\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994863704.png)\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994879267.png)\n\n那么基于语法树的分析，我们可以针对字符串做加密：\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320827975.png\"/></center>\n\n从左上角的明文字符串，处理成右下角的介个样子~\n\n### LibTooling\n\n对语法树有完全的控制权，可以作为一个单独的命令使用，如：`clang-format`\n\n```\nclang-format main.m\n```\n\n我们也可以自己写一个这样的工具去遍历、访问、甚至修改语法树。 目录:`llvm/tools/clang/tools`\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994222169.png)\n\n上面的代码通过遍历语法树，去修改里面的方法名和返回变量名：\n\n```\nbefore:\nvoid do_math(int *x) {\n    *x += 5;\n}\n\nint main(void) {\n    int result = -1, val = 4;\n    do_math(&val);\n    return result;\n}\n\nafter:\n** Rewrote function def: do_math\n** Rewrote function call\n** Rewrote ReturnStmt\n\nFound 2 functions.\n\nvoid add5(int *x) {\n    *x += 5;\n}\n\nint main(void) {\n    int result = -1, val = 4;\n    add5(&val);\n    return val;\n}\n```\n\n那么，我们看到`LibTooling`对代码的语法树有完全的控制，那么我们可以基于它去检查命名的规范，甚至做一个代码的转换，比如实现OC转Swift。\n\n### ClangPlugin\n\n对语法树有完全的控制权，作为插件注入到编译流程中，可以影响build和决定编译过程。目录:`llvm/tools/clang/examples`\n\n```\n#include \"clang/Driver/Options.h\"\n#include \"clang/AST/AST.h\"\n#include \"clang/AST/ASTContext.h\"\n#include \"clang/AST/ASTConsumer.h\"\n#include \"clang/AST/RecursiveASTVisitor.h\"\n#include \"clang/Frontend/ASTConsumers.h\"\n#include \"clang/Frontend/FrontendActions.h\"\n#include \"clang/Frontend/CompilerInstance.h\"\n#include \"clang/Frontend/FrontendPluginRegistry.h\"\n#include \"clang/Rewrite/Core/Rewriter.h\"\n\nusing namespace std;\nusing namespace clang;\nusing namespace llvm;\n\nRewriter rewriter;\nint numFunctions = 0;\n\n\nclass ExampleVisitor : public RecursiveASTVisitor<ExampleVisitor> {\nprivate:\n    ASTContext *astContext; // used for getting additional AST info\n\npublic:\n    explicit ExampleVisitor(CompilerInstance *CI) \n      : astContext(&(CI->getASTContext())) // initialize private members\n    {\n        rewriter.setSourceMgr(astContext->getSourceManager(), astContext->getLangOpts());\n    }\n\n    virtual bool VisitFunctionDecl(FunctionDecl *func) {\n        numFunctions++;\n        string funcName = func->getNameInfo().getName().getAsString();\n        if (funcName == \"do_math\") {\n            rewriter.ReplaceText(func->getLocation(), funcName.length(), \"add5\");\n            errs() << \"** Rewrote function def: \" << funcName << \"\\n\";\n        }    \n        return true;\n    }\n\n    virtual bool VisitStmt(Stmt *st) {\n        if (ReturnStmt *ret = dyn_cast<ReturnStmt>(st)) {\n            rewriter.ReplaceText(ret->getRetValue()->getLocStart(), 6, \"val\");\n            errs() << \"** Rewrote ReturnStmt\\n\";\n        }        \n        if (CallExpr *call = dyn_cast<CallExpr>(st)) {\n            rewriter.ReplaceText(call->getLocStart(), 7, \"add5\");\n            errs() << \"** Rewrote function call\\n\";\n        }\n        return true;\n    }\n};\n\n\n\nclass ExampleASTConsumer : public ASTConsumer {\nprivate:\n    ExampleVisitor *visitor; // doesn't have to be private\n\npublic:\n    // override the constructor in order to pass CI\n    explicit ExampleASTConsumer(CompilerInstance *CI):\n        visitor(new ExampleVisitor(CI)) { } // initialize the visitor\n\n    // override this to call our ExampleVisitor on the entire source file\n    virtual void HandleTranslationUnit(ASTContext &Context) {\n        /* we can use ASTContext to get the TranslationUnitDecl, which is\n             a single Decl that collectively represents the entire source file */\n        visitor->TraverseDecl(Context.getTranslationUnitDecl());\n    }\n};\n\nclass PluginExampleAction : public PluginASTAction {\nprotected:\n    // this gets called by Clang when it invokes our Plugin\n    // Note that unique pointer is used here.\n    std::unique_ptr<ASTConsumer> CreateASTConsumer(CompilerInstance &CI, StringRef file) {\n        return llvm::make_unique<ExampleASTConsumer>(&CI);\n    }\n\n    // implement this function if you want to parse custom cmd-line args\n    bool ParseArgs(const CompilerInstance &CI, const vector<string> &args) {\n        return true;\n    }\n};\n\n\nstatic FrontendPluginRegistry::Add<PluginExampleAction> X(\"-example-plugin\", \"simple Plugin example\");\n```\n\n```\nclang -Xclang -load -Xclang ../build/lib/PluginExample.dylib -Xclang -plugin -Xclang -example-plugin -c testPlugin.c\n\n** Rewrote function def: do_math\n** Rewrote function call\n** Rewrote ReturnStmt\n```\n\n我们可以基于ClangPlugin做些什么事情呢？我们可以用来定义一些编码规范，比如代码风格检查，命名检查等等。下面是我写的判断类名前两个字母是不是大写的例子，如果不是报错。(当然这只是一个例子而已。。。)\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482318703701.png)\n\n## 动手写Pass\n\n### 一个简单的Pass\n\n前面我们说到，Pass就是LLVM系统转化和优化的工作的一个节点，当然我们也可以写一个这样的节点去做一些自己的优化工作或者其它的操作。下面我们来看一下一个简单Pass的编写流程：\n\n1.创建头文件  \n\n```\ncd llvm/include/llvm/Transforms/\nmkdir Obfuscation\ncd Obfuscation\ntouch SimplePass.h\n```\n\n写入内容：\n\n```\n#include \"llvm/IR/Function.h\"\n#include \"llvm/Pass.h\"\n#include \"llvm/Support/raw_ostream.h\"\n#include \"llvm/IR/Intrinsics.h\"\n#include \"llvm/IR/Instructions.h\"\n#include \"llvm/IR/LegacyPassManager.h\"\n#include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n\n// Namespace\nusing namespace std;\n\nnamespace llvm {\n\tPass *createSimplePass(bool flag);\n}\n```\n\n2.创建源文件\n\n```\ncd llvm/lib/Transforms/\nmkdir Obfuscation\ncd Obfuscation\n\ntouch CMakeLists.txt\ntouch LLVMBuild.txt\ntouch SimplePass.cpp\n```\n\nCMakeLists.txt:\n\n```\nadd_llvm_loadable_module(LLVMObfuscation\n  SimplePass.cpp\n  \n  )\n\n  add_dependencies(LLVMObfuscation intrinsics_gen)\n```\n\nLLVMBuild.txt:\n\n```\n[component_0]\ntype = Library\nname = Obfuscation\nparent = Transforms\nlibrary_name = Obfuscation\n```\n\nSimplePass.cpp:\n\n```\n#include \"llvm/Transforms/Obfuscation/SimplePass.h\"\n\nusing namespace llvm;\n\nnamespace {\n    struct SimplePass : public FunctionPass {\n        static char ID; // Pass identification, replacement for typeid\n        bool flag;\n         \n        SimplePass() : FunctionPass(ID) {}\n        SimplePass(bool flag) : FunctionPass(ID) {\n        \tthis->flag = flag;\n        }\n         \n        bool runOnFunction(Function &F) override {\n        \tif(this->flag){\n                Function *tmp = &F;\n                // 遍历函数中的所有基本块\n                for (Function::iterator bb = tmp->begin(); bb != tmp->end(); ++bb) {\n                    // 遍历基本块中的每条指令\n                    for (BasicBlock::iterator inst = bb->begin(); inst != bb->end(); ++inst) {\n                        // 是否是add指令\n                        if (inst->isBinaryOp()) {\n                            if (inst->getOpcode() == Instruction::Add) {\n                                ob_add(cast<BinaryOperator>(inst));\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n         \n        // a+b === a-(-b)\n        void ob_add(BinaryOperator *bo) {\n            BinaryOperator *op = NULL;\n             \n            if (bo->getOpcode() == Instruction::Add) {\n                // 生成 (－b)\n                op = BinaryOperator::CreateNeg(bo->getOperand(1), \"\", bo);\n                // 生成 a-(-b)\n                op = BinaryOperator::Create(Instruction::Sub, bo->getOperand(0), op, \"\", bo);\n                 \n                op->setHasNoSignedWrap(bo->hasNoSignedWrap());\n                op->setHasNoUnsignedWrap(bo->hasNoUnsignedWrap());\n            }\n             \n            // 替换所有出现该指令的地方\n            bo->replaceAllUsesWith(op);\n        }\n    };\n}\n \nchar SimplePass::ID = 0;\n \n// 注册pass 命令行选项显示为simplepass\nstatic RegisterPass<SimplePass> X(\"simplepass\", \"this is a Simple Pass\");\nPass *llvm::createSimplePass() { return new SimplePass(); }\n```\n\n修改`.../Transforms/LLVMBuild.txt`, 加上刚刚写的模块`Obfuscation`\n\n```\nsubdirectories = Coroutines IPO InstCombine Instrumentation Scalar Utils Vectorize ObjCARC Obfuscation\n```\n修改`.../Transforms/CMakeLists.txt`,  加上刚刚写的模块`Obfuscation`\n\n```\nadd_subdirectory(Obfuscation)\n```\n\n编译生成：`LLVMSimplePass.dylib`\n\n因为Pass是作用于中间代码，所以我们首先要生成一份中间代码：\n\n```\nclang -emit-llvm -c test.c -o test.bc\n```\n\n然后加载Pass优化：\n\n```\n../build/bin/opt -load ../build/lib/LLVMSimplePass.dylib -test < test.bc > after_test.bc\n```\n\n对比中间代码：\n\n```\nllvm-dis test.bc -o test.ll\nllvm-dis after_test.bc -o after_test.ll\n```\n\n```\ntest.ll\n......\nentry:\n  %retval = alloca i32, align 4\n  %a = alloca i32, align 4\n  %b = alloca i32, align 4\n  %c = alloca i32, align 4\n  store i32 0, i32* %retval, align 4\n  store i32 3, i32* %a, align 4\n  store i32 4, i32* %b, align 4\n  %0 = load i32, i32* %a, align 4\n  %1 = load i32, i32* %b, align 4\n  %add = add nsw i32 %0, %1\n  store i32 %add, i32* %c, align 4\n  %2 = load i32, i32* %c, align 4\n  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %2)\n  ret i32 0\n}\n......\n```\n\n```\nafter_test.ll\n......\nentry:\n  %retval = alloca i32, align 4\n  %a = alloca i32, align 4\n  %b = alloca i32, align 4\n  %c = alloca i32, align 4\n  store i32 0, i32* %retval, align 4\n  store i32 3, i32* %a, align 4\n  store i32 4, i32* %b, align 4\n  %0 = load i32, i32* %a, align 4\n  %1 = load i32, i32* %b, align 4\n  %2 = sub i32 0, %1\n  %3 = sub nsw i32 %0, %2\n  %add = add nsw i32 %0, %1\n  store i32 %3, i32* %c, align 4\n  %4 = load i32, i32* %c, align 4\n  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %4)\n  ret i32 0\n}\n......\n```\n\n这里写的Pass只是把a+b简单的替换成了a-(-b),只是一个演示，怎么去写自己的Pass，并且作用于代码。\n\n### 将Pass加入PassManager管理\n\n上面我们是单独去加载Pass动态库，这里我们将Pass加入PassManager，这样我们就可以直接通过clang的参数去加载我们的Pass了。\n\n首先在`llvm/lib/Transforms/IPO/PassManagerBuilder.cpp`添加头文件。\n\n```\n#include \"llvm/Transforms/Obfuscation/SimplePass.h\"\n```\n\n然后添加如下语句：\n\n```\nstatic cl::opt<bool> SimplePass(\"simplepass\", cl::init(false),\n                           cl::desc(\"Enable simple pass\"));\n```\n\n然后在`populateModulePassManager`这个函数中添加如下代码：\n\n```\nMPM.add(createSimplePass(SimplePass));\n```\n\n最后在IPO这个目录的`LLVMBuild.txt`中添加库的支持，否则在编译的时候会提示链接错误。具体内容如下：\n\n```\nrequired_libraries = Analysis Core InstCombine IRReader Linker Object ProfileData Scalar Support TransformUtils Vectorize Obfuscation\n```\n\n修改Pass的CMakeLists.txt为静态库形式：\n\n```\nadd_llvm_library(LLVMObfuscation\n  SimplePass.cpp\n  )\n\nadd_dependencies(LLVMObfuscation intrinsics_gen)\n```\n\n最后再编译一次。\n\n那么我们可以这么去调用：\n\n```\n../build/bin/clang -mllvm -simplepass test.c -o after_test\n```\n\n基于Pass，我们可以做什么？ 我们可以编写自己的Pass去混淆代码，以增加他人反编译的难度。\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320959711.png\"/></center>\n\n我们可以把代码左上角的样子，变成右下角的样子，甚至更加复杂~ \n\n## 总结\n\n上面说了那么说，来总结一下：\n\n1.LLVM编译一个源文件的过程：\n\n预处理 -> 词法分析 -> Token -> 语法分析 -> AST -> 代码生成 -> LLVM IR -> 优化 -> 生成汇编代码 -> Link -> 目标文件\n\n2.基于LLVM，我们可以做什么？\n\n1. 做语法树分析，实现语言转换OC转Swift、JS or 其它语言，字符串加密。\n2. 编写ClangPlugin，命名规范，代码规范，扩展功能。\n3. 编写Pass，代码混淆优化。\n\n这篇只是一个简单的入门介绍，个人还需要深入去学习LLVM，再给大家分享，如有问题，欢迎拍砖~  \n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 关于LLVM，这些东西你必须要知道\n\ndate: 2016-12-29\n\nauthor:  test\nurl: www.baidu.com\n\ncategory: ios\nlist_number: true \ntags: \n- LLVM\n\n---\n只要你和代码打交道，了解编译器的工作流程和原理定会让你受益无穷，无论是分析程序，还是基于它写自己的插件，甚至学习一门全新的语音。通过本文，将带你了解LLVM，并使用LLVM来完成一些有意思的事情。<!-- more -->\n\n## 1. 什么是LLVM？\n\n>The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.\n\n简单来说，LLVM项目是一系列分模块、可重用的编译工具链。它提供了一种代码编写良好的中间表示(IR)，可以作为多种语言的后端，还可以提供与变成语言无关的优化和针对多种cpu的代码生成功能。\n\n先来看下LLVM架构的主要组成部分：\n\n* 前端：前端用来获取源代码然后将它转变为某种中间表示，我们可以选择不同的编译器来作为LLVM的前端，如gcc，clang。\n* Pass(通常翻译为“流程”)：Pass用来将程序的中间表示之间相互变换。一般情况下，Pass可以用来优化代码，这部分通常是我们关注的部分。\n* 后端：后端用来生成实际的机器码。\n\n虽然如今大多数编译器都采用的是这种架构，但是LLVM不同的就是对于不同的语言它都提供了同一种中间表示。传统的编译器的架构如下:\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136450962.png\"/></center>\n\nLLVM的架构如下：\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136601642.png\"/></center>\n\n当编译器需要支持多种源代码和目标架构时，基于LLVM的架构，设计一门新的语言只需要去实现一个新的前端就行了，支持新的后端架构也只需要实现一个新的后端就行了。其它部分完成可以复用，就不用再重新设计一次了。\n\n## 2. 安装编译LLVM\n\n这里使用clang作为前端:\n\n1. 直接从官网下载:[http://releases.llvm.org/download.html\n](http://releases.llvm.org/download.html)\n\n2. svn获取\n\n```\nsvn co http://llvm.org/svn/llvm-project/llvm/trunk llvm\ncd llvm/tools\nsvn co http://llvm.org/svn/llvm-project/cfe/trunk clang\ncd ../projects\nsvn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt\ncd ../tools/clang/tools\nsvn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra\n```\n\n3. git获取\n\n```\ngit clone http://llvm.org/git/llvm.git\ncd llvm/tools\ngit clone http://llvm.org/git/clang.git\ncd ../projects\ngit clone http://llvm.org/git/compiler-rt.git\ncd ../tools/clang/tools\ngit clone http://llvm.org/git/clang-tools-extra.git\n```\n\n最新的LLVM只支持cmake来编译了，首先安装cmake。\n\n```\nbrew install cmake\n```\n\n编译：\n\n```\nmkdir build\ncmake /path/to/llvm/source\ncmake --build .\n```\n\n编译时间比较长，而且编译结果会生成20G左右的文件。\n\n编译完成后，就能在`build/bin/`目录下面找到生成的工具了。\n\n## 3. 从源码到可执行文件\n\n我们在开发的时候的时候，如果想要生成一个可执行文件或应用，我们点击run就完事了，那么在点击run之后编译器背后又做了哪些事情呢？\n\n我们先来一个例子：\n\n```\n#import <Foundation/Foundation.h>\n\n#define TEN 10\n\nint main(){\n    @autoreleasepool {\n        int numberOne = TEN;\n        int numberTwo = 8;\n        NSString* name = [[NSString alloc] initWithUTF8String:\"AloneMonkey\"];\n        int age = numberOne + numberTwo;\n        NSLog(@\"Hello, %@, Age: %d\", name, age);\n    }\n    return 0;\n}\n```\n\n上面这个文件，我们可以通过命令行直接编译，然后链接：\n\n```\nxcrun -sdk iphoneos clang -arch armv7 -F Foundation -fobjc-arc -c main.m -o main.o\nxcrun -sdk iphoneos clang main.o -arch armv7 -fobjc-arc -framework Foundation -o main\n```\n\n拷贝到手机运行：\n\n```\nmonkeyde-iPhone:/tmp root# ./main\n2016-12-19 17:16:34.654 main[2164:213100] Hello, AloneMonkey, Age: 18\n```\n\n大家不会以为就这样就完了吧，当然不是，我们要继续深入剖析。\n\n### 3.1 预处理（Preprocess）\n\n这部分包括macro宏的展开，import/include头文件的导入，以及#if等处理。\n\n\n可以通过执行以下命令，来告诉clang只执行到预处理这一步：\n\n```\nclang -E main.m\n```\n\n执行完这个命令之后，我们会发现导入了很多的头文件内容。\n\n```\n......\n# 1 \"/System/Library/Frameworks/Foundation.framework/Headers/FoundationLegacySwiftCompatibility.h\" 1 3\n# 185 \"/System/Library/Frameworks/Foundation.framework/Headers/Foundation.h\" 2 3\n# 2 \"main.m\" 2\n\nint main(){\n    @autoreleasepool {\n        int numberOne = 10;\n        int numberTwo = 8;\n        NSString* name = [[NSString alloc] initWithUTF8String:\"AloneMonkey\"];\n        int age = numberOne + numberTwo;\n        NSLog(@\"Hello, %@, Age: %d\", name, age);\n    }\n    return 0;\n}\n```\n\n可以看到上面的预处理已经把宏替换了，并且导入了头文件。但是这样的话会引入很多不会去改变的系统库比如Foundation，所以有了pch预处理文件，可以在这里去引入一些通用的头文件。\n\n后来Xcode新建的项目里面去掉了pch文件，引入了moduels的概念，把一些通用的库打成modules的形式，然后导入，默认会加上-fmodules参数。\n\n```\nclang -E -fmodules main.m\n```\n\n这样的话，只需要@import一下就能导入对应库的modules模块了。\n\n```\n@import Foundation; \nint main(){\n    @autoreleasepool {\n        int numberOne = 10;\n        int numberTwo = 8;\n        NSString* name = [[NSString alloc] initWithUTF8String:\"AloneMonkey\"];\n        int age = numberOne + numberTwo;\n        NSLog(@\"Hello, %@, Age: %d\", name, age);\n    }\n    return 0;\n}\n```\n\n### 3.2 词法分析 (Lexical Analysis)\n\n在预处理之后，就要进行词法分析了，将预处理过的代码转化成一个个Token，比如左括号、右括号、等于、字符串等等。\n\n\n```\nclang -fmodules -fsyntax-only -Xclang -dump-tokens main.m\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994028068.png)\n\n### 3.3 语法分析 (Semantic Analysis)\n\n根据当前语言的语法，验证语法是否正确，并将所有节点组合成抽象语法树(AST)\n\n```\nclang -fmodules -fsyntax-only -Xclang -ast-dump main.m\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994071651.png)\n\n语法树直观图:\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482150626825.png)\n\n\n### 3.4 IR代码生成 (CodeGen)\n\nCodeGen负责将语法树从顶至下遍历，翻译成LLVM IR，LLVM IR是Frontend的输出，也是LLVM Backerend的输入，桥接前后端。\n\n可以在中间代码层次去做一些优化工作，我们在Xcode的编译设置里面也可以设置优化级别`-O1`,`-O3`,`-Os`。 还可以去写一些自己的Pass，这里需要解释一下什么是Pass。\n\nPass就是LLVM系统转化和优化的工作的一个节点，每个节点做一些工作，这些工作加起来就构成了LLVM整个系统的优化和转化。\n\n```\nclang -S -fobjc-arc -emit-llvm main.m -o main.ll\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994093995.png)\n\n\n### 3.5 生成字节码 (LLVM Bitcode)\n\n我们在Xcode7中默认生成bitcode就是这种的中间形式存在， 开启了bitcode，那么苹果后台拿到的就是这种中间代码，苹果可以对bitcode做一个进一步的优化，如果有新的后端架构，仍然可以用这份bitcode去生成。\n\n```\nclang -emit-llvm -c main.m -o main.bc\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218230417.png)\n\n### 生成相关汇编\n\n```\nclang -S -fobjc-arc main.m -o main.s\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994171109.png)\n\n\n### 生成目标文件\n\n```\nclang -fmodules -c main.m -o main.o\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218636504.png)\n\n### 生成可执行文件\n\n```\nclang main.o -o main\n./main\n```\n\n```\n2016-12-20 15:25:42.299 main[8941:327306] Hello, AloneMonkey, Age: 18\n```\n\n### 整体流程\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482219005958.png)\n\n## 可以用Clang做什么？\n\n### libclang进行语法分析\n\n可以使用libclang里面提供的方法对源文件进行语法分析，分析它的语法树，遍历语法树上面的每一个节点。可以用于检查拼写错误，或者做字符串加密。\n\n来看一段代码的使用：\n\n```\nvoid *hand = dlopen(\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib\",RTLD_LAZY);\n        \n//初始化函数指针\ninitlibfunclist(hand);\n\nCXIndex cxindex = myclang_createIndex(1, 1);\n\nconst char *filename = \"/path/to/filename\";\n\nint index = 0;\n\nconst char ** new_command = malloc(10240);\n\nNSMutableString *mus = [NSMutableString stringWithString:@\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch armv7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk\"]; \n\nNSArray *arr = [mus componentsSeparatedByString:@\" \"];\n\nfor (NSString *tmp in arr) {\n    new_command[index++] = [tmp UTF8String];\n}\n\nnameArr = [[NSMutableArray alloc] initWithCapacity:10];\n\nTU = myclang_parseTranslationUnit(cxindex, filename, new_command, index, NULL, 0, myclang_defaultEditingTranslationUnitOptions());\n\nCXCursor rootCursor = myclang_getTranslationUnitCursor(TU);\n\nmyclang_visitChildren(rootCursor, printVisitor, NULL);\n\nmyclang_disposeTranslationUnit(TU);\nmyclang_disposeIndex(cxindex);\nfree(new_command);\n\ndlclose(hand);\n```\n\n然后我们就可以在`printVisitor`这个函数里面去遍历输入文件的语法树了。\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994195691.png)\n\n\n我们也通过通过python去调用用clang：\n\n```\npip install clang\n```\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994863704.png)\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994879267.png)\n\n那么基于语法树的分析，我们可以针对字符串做加密：\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320827975.png\"/></center>\n\n从左上角的明文字符串，处理成右下角的介个样子~\n\n### LibTooling\n\n对语法树有完全的控制权，可以作为一个单独的命令使用，如：`clang-format`\n\n```\nclang-format main.m\n```\n\n我们也可以自己写一个这样的工具去遍历、访问、甚至修改语法树。 目录:`llvm/tools/clang/tools`\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994222169.png)\n\n上面的代码通过遍历语法树，去修改里面的方法名和返回变量名：\n\n```\nbefore:\nvoid do_math(int *x) {\n    *x += 5;\n}\n\nint main(void) {\n    int result = -1, val = 4;\n    do_math(&val);\n    return result;\n}\n\nafter:\n** Rewrote function def: do_math\n** Rewrote function call\n** Rewrote ReturnStmt\n\nFound 2 functions.\n\nvoid add5(int *x) {\n    *x += 5;\n}\n\nint main(void) {\n    int result = -1, val = 4;\n    add5(&val);\n    return val;\n}\n```\n\n那么，我们看到`LibTooling`对代码的语法树有完全的控制，那么我们可以基于它去检查命名的规范，甚至做一个代码的转换，比如实现OC转Swift。\n\n### ClangPlugin\n\n对语法树有完全的控制权，作为插件注入到编译流程中，可以影响build和决定编译过程。目录:`llvm/tools/clang/examples`\n\n```\n#include \"clang/Driver/Options.h\"\n#include \"clang/AST/AST.h\"\n#include \"clang/AST/ASTContext.h\"\n#include \"clang/AST/ASTConsumer.h\"\n#include \"clang/AST/RecursiveASTVisitor.h\"\n#include \"clang/Frontend/ASTConsumers.h\"\n#include \"clang/Frontend/FrontendActions.h\"\n#include \"clang/Frontend/CompilerInstance.h\"\n#include \"clang/Frontend/FrontendPluginRegistry.h\"\n#include \"clang/Rewrite/Core/Rewriter.h\"\n\nusing namespace std;\nusing namespace clang;\nusing namespace llvm;\n\nRewriter rewriter;\nint numFunctions = 0;\n\n\nclass ExampleVisitor : public RecursiveASTVisitor<ExampleVisitor> {\nprivate:\n    ASTContext *astContext; // used for getting additional AST info\n\npublic:\n    explicit ExampleVisitor(CompilerInstance *CI) \n      : astContext(&(CI->getASTContext())) // initialize private members\n    {\n        rewriter.setSourceMgr(astContext->getSourceManager(), astContext->getLangOpts());\n    }\n\n    virtual bool VisitFunctionDecl(FunctionDecl *func) {\n        numFunctions++;\n        string funcName = func->getNameInfo().getName().getAsString();\n        if (funcName == \"do_math\") {\n            rewriter.ReplaceText(func->getLocation(), funcName.length(), \"add5\");\n            errs() << \"** Rewrote function def: \" << funcName << \"\\n\";\n        }    \n        return true;\n    }\n\n    virtual bool VisitStmt(Stmt *st) {\n        if (ReturnStmt *ret = dyn_cast<ReturnStmt>(st)) {\n            rewriter.ReplaceText(ret->getRetValue()->getLocStart(), 6, \"val\");\n            errs() << \"** Rewrote ReturnStmt\\n\";\n        }        \n        if (CallExpr *call = dyn_cast<CallExpr>(st)) {\n            rewriter.ReplaceText(call->getLocStart(), 7, \"add5\");\n            errs() << \"** Rewrote function call\\n\";\n        }\n        return true;\n    }\n};\n\n\n\nclass ExampleASTConsumer : public ASTConsumer {\nprivate:\n    ExampleVisitor *visitor; // doesn't have to be private\n\npublic:\n    // override the constructor in order to pass CI\n    explicit ExampleASTConsumer(CompilerInstance *CI):\n        visitor(new ExampleVisitor(CI)) { } // initialize the visitor\n\n    // override this to call our ExampleVisitor on the entire source file\n    virtual void HandleTranslationUnit(ASTContext &Context) {\n        /* we can use ASTContext to get the TranslationUnitDecl, which is\n             a single Decl that collectively represents the entire source file */\n        visitor->TraverseDecl(Context.getTranslationUnitDecl());\n    }\n};\n\nclass PluginExampleAction : public PluginASTAction {\nprotected:\n    // this gets called by Clang when it invokes our Plugin\n    // Note that unique pointer is used here.\n    std::unique_ptr<ASTConsumer> CreateASTConsumer(CompilerInstance &CI, StringRef file) {\n        return llvm::make_unique<ExampleASTConsumer>(&CI);\n    }\n\n    // implement this function if you want to parse custom cmd-line args\n    bool ParseArgs(const CompilerInstance &CI, const vector<string> &args) {\n        return true;\n    }\n};\n\n\nstatic FrontendPluginRegistry::Add<PluginExampleAction> X(\"-example-plugin\", \"simple Plugin example\");\n```\n\n```\nclang -Xclang -load -Xclang ../build/lib/PluginExample.dylib -Xclang -plugin -Xclang -example-plugin -c testPlugin.c\n\n** Rewrote function def: do_math\n** Rewrote function call\n** Rewrote ReturnStmt\n```\n\n我们可以基于ClangPlugin做些什么事情呢？我们可以用来定义一些编码规范，比如代码风格检查，命名检查等等。下面是我写的判断类名前两个字母是不是大写的例子，如果不是报错。(当然这只是一个例子而已。。。)\n\n![image](http://7xtdl4.com1.z0.glb.clouddn.com/script_1482318703701.png)\n\n## 动手写Pass\n\n### 一个简单的Pass\n\n前面我们说到，Pass就是LLVM系统转化和优化的工作的一个节点，当然我们也可以写一个这样的节点去做一些自己的优化工作或者其它的操作。下面我们来看一下一个简单Pass的编写流程：\n\n1.创建头文件  \n\n```\ncd llvm/include/llvm/Transforms/\nmkdir Obfuscation\ncd Obfuscation\ntouch SimplePass.h\n```\n\n写入内容：\n\n```\n#include \"llvm/IR/Function.h\"\n#include \"llvm/Pass.h\"\n#include \"llvm/Support/raw_ostream.h\"\n#include \"llvm/IR/Intrinsics.h\"\n#include \"llvm/IR/Instructions.h\"\n#include \"llvm/IR/LegacyPassManager.h\"\n#include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n\n// Namespace\nusing namespace std;\n\nnamespace llvm {\n\tPass *createSimplePass(bool flag);\n}\n```\n\n2.创建源文件\n\n```\ncd llvm/lib/Transforms/\nmkdir Obfuscation\ncd Obfuscation\n\ntouch CMakeLists.txt\ntouch LLVMBuild.txt\ntouch SimplePass.cpp\n```\n\nCMakeLists.txt:\n\n```\nadd_llvm_loadable_module(LLVMObfuscation\n  SimplePass.cpp\n  \n  )\n\n  add_dependencies(LLVMObfuscation intrinsics_gen)\n```\n\nLLVMBuild.txt:\n\n```\n[component_0]\ntype = Library\nname = Obfuscation\nparent = Transforms\nlibrary_name = Obfuscation\n```\n\nSimplePass.cpp:\n\n```\n#include \"llvm/Transforms/Obfuscation/SimplePass.h\"\n\nusing namespace llvm;\n\nnamespace {\n    struct SimplePass : public FunctionPass {\n        static char ID; // Pass identification, replacement for typeid\n        bool flag;\n         \n        SimplePass() : FunctionPass(ID) {}\n        SimplePass(bool flag) : FunctionPass(ID) {\n        \tthis->flag = flag;\n        }\n         \n        bool runOnFunction(Function &F) override {\n        \tif(this->flag){\n                Function *tmp = &F;\n                // 遍历函数中的所有基本块\n                for (Function::iterator bb = tmp->begin(); bb != tmp->end(); ++bb) {\n                    // 遍历基本块中的每条指令\n                    for (BasicBlock::iterator inst = bb->begin(); inst != bb->end(); ++inst) {\n                        // 是否是add指令\n                        if (inst->isBinaryOp()) {\n                            if (inst->getOpcode() == Instruction::Add) {\n                                ob_add(cast<BinaryOperator>(inst));\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n         \n        // a+b === a-(-b)\n        void ob_add(BinaryOperator *bo) {\n            BinaryOperator *op = NULL;\n             \n            if (bo->getOpcode() == Instruction::Add) {\n                // 生成 (－b)\n                op = BinaryOperator::CreateNeg(bo->getOperand(1), \"\", bo);\n                // 生成 a-(-b)\n                op = BinaryOperator::Create(Instruction::Sub, bo->getOperand(0), op, \"\", bo);\n                 \n                op->setHasNoSignedWrap(bo->hasNoSignedWrap());\n                op->setHasNoUnsignedWrap(bo->hasNoUnsignedWrap());\n            }\n             \n            // 替换所有出现该指令的地方\n            bo->replaceAllUsesWith(op);\n        }\n    };\n}\n \nchar SimplePass::ID = 0;\n \n// 注册pass 命令行选项显示为simplepass\nstatic RegisterPass<SimplePass> X(\"simplepass\", \"this is a Simple Pass\");\nPass *llvm::createSimplePass() { return new SimplePass(); }\n```\n\n修改`.../Transforms/LLVMBuild.txt`, 加上刚刚写的模块`Obfuscation`\n\n```\nsubdirectories = Coroutines IPO InstCombine Instrumentation Scalar Utils Vectorize ObjCARC Obfuscation\n```\n修改`.../Transforms/CMakeLists.txt`,  加上刚刚写的模块`Obfuscation`\n\n```\nadd_subdirectory(Obfuscation)\n```\n\n编译生成：`LLVMSimplePass.dylib`\n\n因为Pass是作用于中间代码，所以我们首先要生成一份中间代码：\n\n```\nclang -emit-llvm -c test.c -o test.bc\n```\n\n然后加载Pass优化：\n\n```\n../build/bin/opt -load ../build/lib/LLVMSimplePass.dylib -test < test.bc > after_test.bc\n```\n\n对比中间代码：\n\n```\nllvm-dis test.bc -o test.ll\nllvm-dis after_test.bc -o after_test.ll\n```\n\n```\ntest.ll\n......\nentry:\n  %retval = alloca i32, align 4\n  %a = alloca i32, align 4\n  %b = alloca i32, align 4\n  %c = alloca i32, align 4\n  store i32 0, i32* %retval, align 4\n  store i32 3, i32* %a, align 4\n  store i32 4, i32* %b, align 4\n  %0 = load i32, i32* %a, align 4\n  %1 = load i32, i32* %b, align 4\n  %add = add nsw i32 %0, %1\n  store i32 %add, i32* %c, align 4\n  %2 = load i32, i32* %c, align 4\n  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %2)\n  ret i32 0\n}\n......\n```\n\n```\nafter_test.ll\n......\nentry:\n  %retval = alloca i32, align 4\n  %a = alloca i32, align 4\n  %b = alloca i32, align 4\n  %c = alloca i32, align 4\n  store i32 0, i32* %retval, align 4\n  store i32 3, i32* %a, align 4\n  store i32 4, i32* %b, align 4\n  %0 = load i32, i32* %a, align 4\n  %1 = load i32, i32* %b, align 4\n  %2 = sub i32 0, %1\n  %3 = sub nsw i32 %0, %2\n  %add = add nsw i32 %0, %1\n  store i32 %3, i32* %c, align 4\n  %4 = load i32, i32* %c, align 4\n  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %4)\n  ret i32 0\n}\n......\n```\n\n这里写的Pass只是把a+b简单的替换成了a-(-b),只是一个演示，怎么去写自己的Pass，并且作用于代码。\n\n### 将Pass加入PassManager管理\n\n上面我们是单独去加载Pass动态库，这里我们将Pass加入PassManager，这样我们就可以直接通过clang的参数去加载我们的Pass了。\n\n首先在`llvm/lib/Transforms/IPO/PassManagerBuilder.cpp`添加头文件。\n\n```\n#include \"llvm/Transforms/Obfuscation/SimplePass.h\"\n```\n\n然后添加如下语句：\n\n```\nstatic cl::opt<bool> SimplePass(\"simplepass\", cl::init(false),\n                           cl::desc(\"Enable simple pass\"));\n```\n\n然后在`populateModulePassManager`这个函数中添加如下代码：\n\n```\nMPM.add(createSimplePass(SimplePass));\n```\n\n最后在IPO这个目录的`LLVMBuild.txt`中添加库的支持，否则在编译的时候会提示链接错误。具体内容如下：\n\n```\nrequired_libraries = Analysis Core InstCombine IRReader Linker Object ProfileData Scalar Support TransformUtils Vectorize Obfuscation\n```\n\n修改Pass的CMakeLists.txt为静态库形式：\n\n```\nadd_llvm_library(LLVMObfuscation\n  SimplePass.cpp\n  )\n\nadd_dependencies(LLVMObfuscation intrinsics_gen)\n```\n\n最后再编译一次。\n\n那么我们可以这么去调用：\n\n```\n../build/bin/clang -mllvm -simplepass test.c -o after_test\n```\n\n基于Pass，我们可以做什么？ 我们可以编写自己的Pass去混淆代码，以增加他人反编译的难度。\n\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320959711.png\"/></center>\n\n我们可以把代码左上角的样子，变成右下角的样子，甚至更加复杂~ \n\n## 总结\n\n上面说了那么说，来总结一下：\n\n1.LLVM编译一个源文件的过程：\n\n预处理 -> 词法分析 -> Token -> 语法分析 -> AST -> 代码生成 -> LLVM IR -> 优化 -> 生成汇编代码 -> Link -> 目标文件\n\n2.基于LLVM，我们可以做什么？\n\n1. 做语法树分析，实现语言转换OC转Swift、JS or 其它语言，字符串加密。\n2. 编写ClangPlugin，命名规范，代码规范，扩展功能。\n3. 编写Pass，代码混淆优化。\n\n这篇只是一个简单的入门介绍，个人还需要深入去学习LLVM，再给大家分享，如有问题，欢迎拍砖~  \n\n","slug":"hello-world","published":1,"updated":"2017-01-05T04:56:15.000Z","_id":"cixjtm8j20000wl8ltlk5ztme","comments":1,"layout":"post","photos":[],"link":"","content":"<p>只要你和代码打交道，了解编译器的工作流程和原理定会让你受益无穷，无论是分析程序，还是基于它写自己的插件，甚至学习一门全新的语音。通过本文，将带你了解LLVM，并使用LLVM来完成一些有意思的事情。<a id=\"more\"></a></p>\n<h2 id=\"1-什么是LLVM？\"><a href=\"#1-什么是LLVM？\" class=\"headerlink\" title=\"1. 什么是LLVM？\"></a>1. 什么是LLVM？</h2><blockquote>\n<p>The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.</p>\n</blockquote>\n<p>简单来说，LLVM项目是一系列分模块、可重用的编译工具链。它提供了一种代码编写良好的中间表示(IR)，可以作为多种语言的后端，还可以提供与变成语言无关的优化和针对多种cpu的代码生成功能。</p>\n<p>先来看下LLVM架构的主要组成部分：</p>\n<ul>\n<li>前端：前端用来获取源代码然后将它转变为某种中间表示，我们可以选择不同的编译器来作为LLVM的前端，如gcc，clang。</li>\n<li>Pass(通常翻译为“流程”)：Pass用来将程序的中间表示之间相互变换。一般情况下，Pass可以用来优化代码，这部分通常是我们关注的部分。</li>\n<li>后端：后端用来生成实际的机器码。</li>\n</ul>\n<p>虽然如今大多数编译器都采用的是这种架构，但是LLVM不同的就是对于不同的语言它都提供了同一种中间表示。传统的编译器的架构如下:</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136450962.png\"></center>\n\n<p>LLVM的架构如下：</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136601642.png\"></center>\n\n<p>当编译器需要支持多种源代码和目标架构时，基于LLVM的架构，设计一门新的语言只需要去实现一个新的前端就行了，支持新的后端架构也只需要实现一个新的后端就行了。其它部分完成可以复用，就不用再重新设计一次了。</p>\n<h2 id=\"2-安装编译LLVM\"><a href=\"#2-安装编译LLVM\" class=\"headerlink\" title=\"2. 安装编译LLVM\"></a>2. 安装编译LLVM</h2><p>这里使用clang作为前端:</p>\n<ol>\n<li><p>直接从官网下载:<a href=\"http://releases.llvm.org/download.html\" target=\"_blank\" rel=\"external\">http://releases.llvm.org/download.html\n</a></p>\n</li>\n<li><p>svn获取</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm</div><div class=\"line\">cd llvm/tools</div><div class=\"line\">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang</div><div class=\"line\">cd ../projects</div><div class=\"line\">svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt</div><div class=\"line\">cd ../tools/clang/tools</div><div class=\"line\">svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra</div></pre></td></tr></table></figure>\n<ol>\n<li>git获取</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone http://llvm.org/git/llvm.git</div><div class=\"line\">cd llvm/tools</div><div class=\"line\">git clone http://llvm.org/git/clang.git</div><div class=\"line\">cd ../projects</div><div class=\"line\">git clone http://llvm.org/git/compiler-rt.git</div><div class=\"line\">cd ../tools/clang/tools</div><div class=\"line\">git clone http://llvm.org/git/clang-tools-extra.git</div></pre></td></tr></table></figure>\n<p>最新的LLVM只支持cmake来编译了，首先安装cmake。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install cmake</div></pre></td></tr></table></figure>\n<p>编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir build</div><div class=\"line\">cmake /path/to/llvm/source</div><div class=\"line\">cmake --build .</div></pre></td></tr></table></figure>\n<p>编译时间比较长，而且编译结果会生成20G左右的文件。</p>\n<p>编译完成后，就能在<code>build/bin/</code>目录下面找到生成的工具了。</p>\n<h2 id=\"3-从源码到可执行文件\"><a href=\"#3-从源码到可执行文件\" class=\"headerlink\" title=\"3. 从源码到可执行文件\"></a>3. 从源码到可执行文件</h2><p>我们在开发的时候的时候，如果想要生成一个可执行文件或应用，我们点击run就完事了，那么在点击run之后编译器背后又做了哪些事情呢？</p>\n<p>我们先来一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">#define TEN 10</div><div class=\"line\"></div><div class=\"line\">int main()&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int numberOne = TEN;</div><div class=\"line\">        int numberTwo = 8;</div><div class=\"line\">        NSString* name = [[NSString alloc] initWithUTF8String:&quot;AloneMonkey&quot;];</div><div class=\"line\">        int age = numberOne + numberTwo;</div><div class=\"line\">        NSLog(@&quot;Hello, %@, Age: %d&quot;, name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这个文件，我们可以通过命令行直接编译，然后链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcrun -sdk iphoneos clang -arch armv7 -F Foundation -fobjc-arc -c main.m -o main.o</div><div class=\"line\">xcrun -sdk iphoneos clang main.o -arch armv7 -fobjc-arc -framework Foundation -o main</div></pre></td></tr></table></figure>\n<p>拷贝到手机运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">monkeyde-iPhone:/tmp root# ./main</div><div class=\"line\">2016-12-19 17:16:34.654 main[2164:213100] Hello, AloneMonkey, Age: 18</div></pre></td></tr></table></figure>\n<p>大家不会以为就这样就完了吧，当然不是，我们要继续深入剖析。</p>\n<h3 id=\"3-1-预处理（Preprocess）\"><a href=\"#3-1-预处理（Preprocess）\" class=\"headerlink\" title=\"3.1 预处理（Preprocess）\"></a>3.1 预处理（Preprocess）</h3><p>这部分包括macro宏的展开，import/include头文件的导入，以及#if等处理。</p>\n<p>可以通过执行以下命令，来告诉clang只执行到预处理这一步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -E main.m</div></pre></td></tr></table></figure>\n<p>执行完这个命令之后，我们会发现导入了很多的头文件内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">......</div><div class=\"line\"># 1 &quot;/System/Library/Frameworks/Foundation.framework/Headers/FoundationLegacySwiftCompatibility.h&quot; 1 3</div><div class=\"line\"># 185 &quot;/System/Library/Frameworks/Foundation.framework/Headers/Foundation.h&quot; 2 3</div><div class=\"line\"># 2 &quot;main.m&quot; 2</div><div class=\"line\"></div><div class=\"line\">int main()&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int numberOne = 10;</div><div class=\"line\">        int numberTwo = 8;</div><div class=\"line\">        NSString* name = [[NSString alloc] initWithUTF8String:&quot;AloneMonkey&quot;];</div><div class=\"line\">        int age = numberOne + numberTwo;</div><div class=\"line\">        NSLog(@&quot;Hello, %@, Age: %d&quot;, name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到上面的预处理已经把宏替换了，并且导入了头文件。但是这样的话会引入很多不会去改变的系统库比如Foundation，所以有了pch预处理文件，可以在这里去引入一些通用的头文件。</p>\n<p>后来Xcode新建的项目里面去掉了pch文件，引入了moduels的概念，把一些通用的库打成modules的形式，然后导入，默认会加上-fmodules参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -E -fmodules main.m</div></pre></td></tr></table></figure>\n<p>这样的话，只需要@import一下就能导入对应库的modules模块了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import Foundation; </div><div class=\"line\">int main()&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int numberOne = 10;</div><div class=\"line\">        int numberTwo = 8;</div><div class=\"line\">        NSString* name = [[NSString alloc] initWithUTF8String:&quot;AloneMonkey&quot;];</div><div class=\"line\">        int age = numberOne + numberTwo;</div><div class=\"line\">        NSLog(@&quot;Hello, %@, Age: %d&quot;, name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-词法分析-Lexical-Analysis\"><a href=\"#3-2-词法分析-Lexical-Analysis\" class=\"headerlink\" title=\"3.2 词法分析 (Lexical Analysis)\"></a>3.2 词法分析 (Lexical Analysis)</h3><p>在预处理之后，就要进行词法分析了，将预处理过的代码转化成一个个Token，比如左括号、右括号、等于、字符串等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -fmodules -fsyntax-only -Xclang -dump-tokens main.m</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994028068.png\" alt=\"image\"></p>\n<h3 id=\"3-3-语法分析-Semantic-Analysis\"><a href=\"#3-3-语法分析-Semantic-Analysis\" class=\"headerlink\" title=\"3.3 语法分析 (Semantic Analysis)\"></a>3.3 语法分析 (Semantic Analysis)</h3><p>根据当前语言的语法，验证语法是否正确，并将所有节点组合成抽象语法树(AST)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994071651.png\" alt=\"image\"></p>\n<p>语法树直观图:</p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482150626825.png\" alt=\"image\"></p>\n<h3 id=\"3-4-IR代码生成-CodeGen\"><a href=\"#3-4-IR代码生成-CodeGen\" class=\"headerlink\" title=\"3.4 IR代码生成 (CodeGen)\"></a>3.4 IR代码生成 (CodeGen)</h3><p>CodeGen负责将语法树从顶至下遍历，翻译成LLVM IR，LLVM IR是Frontend的输出，也是LLVM Backerend的输入，桥接前后端。</p>\n<p>可以在中间代码层次去做一些优化工作，我们在Xcode的编译设置里面也可以设置优化级别<code>-O1</code>,<code>-O3</code>,<code>-Os</code>。 还可以去写一些自己的Pass，这里需要解释一下什么是Pass。</p>\n<p>Pass就是LLVM系统转化和优化的工作的一个节点，每个节点做一些工作，这些工作加起来就构成了LLVM整个系统的优化和转化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -S -fobjc-arc -emit-llvm main.m -o main.ll</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994093995.png\" alt=\"image\"></p>\n<h3 id=\"3-5-生成字节码-LLVM-Bitcode\"><a href=\"#3-5-生成字节码-LLVM-Bitcode\" class=\"headerlink\" title=\"3.5 生成字节码 (LLVM Bitcode)\"></a>3.5 生成字节码 (LLVM Bitcode)</h3><p>我们在Xcode7中默认生成bitcode就是这种的中间形式存在， 开启了bitcode，那么苹果后台拿到的就是这种中间代码，苹果可以对bitcode做一个进一步的优化，如果有新的后端架构，仍然可以用这份bitcode去生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -emit-llvm -c main.m -o main.bc</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218230417.png\" alt=\"image\"></p>\n<h3 id=\"生成相关汇编\"><a href=\"#生成相关汇编\" class=\"headerlink\" title=\"生成相关汇编\"></a>生成相关汇编</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -S -fobjc-arc main.m -o main.s</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994171109.png\" alt=\"image\"></p>\n<h3 id=\"生成目标文件\"><a href=\"#生成目标文件\" class=\"headerlink\" title=\"生成目标文件\"></a>生成目标文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -fmodules -c main.m -o main.o</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218636504.png\" alt=\"image\"></p>\n<h3 id=\"生成可执行文件\"><a href=\"#生成可执行文件\" class=\"headerlink\" title=\"生成可执行文件\"></a>生成可执行文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang main.o -o main</div><div class=\"line\">./main</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-12-20 15:25:42.299 main[8941:327306] Hello, AloneMonkey, Age: 18</div></pre></td></tr></table></figure>\n<h3 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h3><p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482219005958.png\" alt=\"image\"></p>\n<h2 id=\"可以用Clang做什么？\"><a href=\"#可以用Clang做什么？\" class=\"headerlink\" title=\"可以用Clang做什么？\"></a>可以用Clang做什么？</h2><h3 id=\"libclang进行语法分析\"><a href=\"#libclang进行语法分析\" class=\"headerlink\" title=\"libclang进行语法分析\"></a>libclang进行语法分析</h3><p>可以使用libclang里面提供的方法对源文件进行语法分析，分析它的语法树，遍历语法树上面的每一个节点。可以用于检查拼写错误，或者做字符串加密。</p>\n<p>来看一段代码的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">void *hand = dlopen(&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib&quot;,RTLD_LAZY);</div><div class=\"line\">        </div><div class=\"line\">//初始化函数指针</div><div class=\"line\">initlibfunclist(hand);</div><div class=\"line\"></div><div class=\"line\">CXIndex cxindex = myclang_createIndex(1, 1);</div><div class=\"line\"></div><div class=\"line\">const char *filename = &quot;/path/to/filename&quot;;</div><div class=\"line\"></div><div class=\"line\">int index = 0;</div><div class=\"line\"></div><div class=\"line\">const char ** new_command = malloc(10240);</div><div class=\"line\"></div><div class=\"line\">NSMutableString *mus = [NSMutableString stringWithString:@&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch armv7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk&quot;]; </div><div class=\"line\"></div><div class=\"line\">NSArray *arr = [mus componentsSeparatedByString:@&quot; &quot;];</div><div class=\"line\"></div><div class=\"line\">for (NSString *tmp in arr) &#123;</div><div class=\"line\">    new_command[index++] = [tmp UTF8String];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">nameArr = [[NSMutableArray alloc] initWithCapacity:10];</div><div class=\"line\"></div><div class=\"line\">TU = myclang_parseTranslationUnit(cxindex, filename, new_command, index, NULL, 0, myclang_defaultEditingTranslationUnitOptions());</div><div class=\"line\"></div><div class=\"line\">CXCursor rootCursor = myclang_getTranslationUnitCursor(TU);</div><div class=\"line\"></div><div class=\"line\">myclang_visitChildren(rootCursor, printVisitor, NULL);</div><div class=\"line\"></div><div class=\"line\">myclang_disposeTranslationUnit(TU);</div><div class=\"line\">myclang_disposeIndex(cxindex);</div><div class=\"line\">free(new_command);</div><div class=\"line\"></div><div class=\"line\">dlclose(hand);</div></pre></td></tr></table></figure>\n<p>然后我们就可以在<code>printVisitor</code>这个函数里面去遍历输入文件的语法树了。</p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994195691.png\" alt=\"image\"></p>\n<p>我们也通过通过python去调用用clang：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install clang</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994863704.png\" alt=\"image\"></p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994879267.png\" alt=\"image\"></p>\n<p>那么基于语法树的分析，我们可以针对字符串做加密：</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320827975.png\"></center>\n\n<p>从左上角的明文字符串，处理成右下角的介个样子~</p>\n<h3 id=\"LibTooling\"><a href=\"#LibTooling\" class=\"headerlink\" title=\"LibTooling\"></a>LibTooling</h3><p>对语法树有完全的控制权，可以作为一个单独的命令使用，如：<code>clang-format</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang-format main.m</div></pre></td></tr></table></figure>\n<p>我们也可以自己写一个这样的工具去遍历、访问、甚至修改语法树。 目录:<code>llvm/tools/clang/tools</code></p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994222169.png\" alt=\"image\"></p>\n<p>上面的代码通过遍历语法树，去修改里面的方法名和返回变量名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">before:</div><div class=\"line\">void do_math(int *x) &#123;</div><div class=\"line\">    *x += 5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(void) &#123;</div><div class=\"line\">    int result = -1, val = 4;</div><div class=\"line\">    do_math(&amp;val);</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">after:</div><div class=\"line\">** Rewrote function def: do_math</div><div class=\"line\">** Rewrote function call</div><div class=\"line\">** Rewrote ReturnStmt</div><div class=\"line\"></div><div class=\"line\">Found 2 functions.</div><div class=\"line\"></div><div class=\"line\">void add5(int *x) &#123;</div><div class=\"line\">    *x += 5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(void) &#123;</div><div class=\"line\">    int result = -1, val = 4;</div><div class=\"line\">    add5(&amp;val);</div><div class=\"line\">    return val;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么，我们看到<code>LibTooling</code>对代码的语法树有完全的控制，那么我们可以基于它去检查命名的规范，甚至做一个代码的转换，比如实现OC转Swift。</p>\n<h3 id=\"ClangPlugin\"><a href=\"#ClangPlugin\" class=\"headerlink\" title=\"ClangPlugin\"></a>ClangPlugin</h3><p>对语法树有完全的控制权，作为插件注入到编译流程中，可以影响build和决定编译过程。目录:<code>llvm/tools/clang/examples</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;clang/Driver/Options.h&quot;</div><div class=\"line\">#include &quot;clang/AST/AST.h&quot;</div><div class=\"line\">#include &quot;clang/AST/ASTContext.h&quot;</div><div class=\"line\">#include &quot;clang/AST/ASTConsumer.h&quot;</div><div class=\"line\">#include &quot;clang/AST/RecursiveASTVisitor.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/ASTConsumers.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/FrontendActions.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/CompilerInstance.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/FrontendPluginRegistry.h&quot;</div><div class=\"line\">#include &quot;clang/Rewrite/Core/Rewriter.h&quot;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\">using namespace clang;</div><div class=\"line\">using namespace llvm;</div><div class=\"line\"></div><div class=\"line\">Rewriter rewriter;</div><div class=\"line\">int numFunctions = 0;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class ExampleVisitor : public RecursiveASTVisitor&lt;ExampleVisitor&gt; &#123;</div><div class=\"line\">private:</div><div class=\"line\">    ASTContext *astContext; // used for getting additional AST info</div><div class=\"line\"></div><div class=\"line\">public:</div><div class=\"line\">    explicit ExampleVisitor(CompilerInstance *CI) </div><div class=\"line\">      : astContext(&amp;(CI-&gt;getASTContext())) // initialize private members</div><div class=\"line\">    &#123;</div><div class=\"line\">        rewriter.setSourceMgr(astContext-&gt;getSourceManager(), astContext-&gt;getLangOpts());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    virtual bool VisitFunctionDecl(FunctionDecl *func) &#123;</div><div class=\"line\">        numFunctions++;</div><div class=\"line\">        string funcName = func-&gt;getNameInfo().getName().getAsString();</div><div class=\"line\">        if (funcName == &quot;do_math&quot;) &#123;</div><div class=\"line\">            rewriter.ReplaceText(func-&gt;getLocation(), funcName.length(), &quot;add5&quot;);</div><div class=\"line\">            errs() &lt;&lt; &quot;** Rewrote function def: &quot; &lt;&lt; funcName &lt;&lt; &quot;\\n&quot;;</div><div class=\"line\">        &#125;    </div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    virtual bool VisitStmt(Stmt *st) &#123;</div><div class=\"line\">        if (ReturnStmt *ret = dyn_cast&lt;ReturnStmt&gt;(st)) &#123;</div><div class=\"line\">            rewriter.ReplaceText(ret-&gt;getRetValue()-&gt;getLocStart(), 6, &quot;val&quot;);</div><div class=\"line\">            errs() &lt;&lt; &quot;** Rewrote ReturnStmt\\n&quot;;</div><div class=\"line\">        &#125;        </div><div class=\"line\">        if (CallExpr *call = dyn_cast&lt;CallExpr&gt;(st)) &#123;</div><div class=\"line\">            rewriter.ReplaceText(call-&gt;getLocStart(), 7, &quot;add5&quot;);</div><div class=\"line\">            errs() &lt;&lt; &quot;** Rewrote function call\\n&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class ExampleASTConsumer : public ASTConsumer &#123;</div><div class=\"line\">private:</div><div class=\"line\">    ExampleVisitor *visitor; // doesn&apos;t have to be private</div><div class=\"line\"></div><div class=\"line\">public:</div><div class=\"line\">    // override the constructor in order to pass CI</div><div class=\"line\">    explicit ExampleASTConsumer(CompilerInstance *CI):</div><div class=\"line\">        visitor(new ExampleVisitor(CI)) &#123; &#125; // initialize the visitor</div><div class=\"line\"></div><div class=\"line\">    // override this to call our ExampleVisitor on the entire source file</div><div class=\"line\">    virtual void HandleTranslationUnit(ASTContext &amp;Context) &#123;</div><div class=\"line\">        /* we can use ASTContext to get the TranslationUnitDecl, which is</div><div class=\"line\">             a single Decl that collectively represents the entire source file */</div><div class=\"line\">        visitor-&gt;TraverseDecl(Context.getTranslationUnitDecl());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class PluginExampleAction : public PluginASTAction &#123;</div><div class=\"line\">protected:</div><div class=\"line\">    // this gets called by Clang when it invokes our Plugin</div><div class=\"line\">    // Note that unique pointer is used here.</div><div class=\"line\">    std::unique_ptr&lt;ASTConsumer&gt; CreateASTConsumer(CompilerInstance &amp;CI, StringRef file) &#123;</div><div class=\"line\">        return llvm::make_unique&lt;ExampleASTConsumer&gt;(&amp;CI);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // implement this function if you want to parse custom cmd-line args</div><div class=\"line\">    bool ParseArgs(const CompilerInstance &amp;CI, const vector&lt;string&gt; &amp;args) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">static FrontendPluginRegistry::Add&lt;PluginExampleAction&gt; X(&quot;-example-plugin&quot;, &quot;simple Plugin example&quot;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -Xclang -load -Xclang ../build/lib/PluginExample.dylib -Xclang -plugin -Xclang -example-plugin -c testPlugin.c</div><div class=\"line\"></div><div class=\"line\">** Rewrote function def: do_math</div><div class=\"line\">** Rewrote function call</div><div class=\"line\">** Rewrote ReturnStmt</div></pre></td></tr></table></figure>\n<p>我们可以基于ClangPlugin做些什么事情呢？我们可以用来定义一些编码规范，比如代码风格检查，命名检查等等。下面是我写的判断类名前两个字母是不是大写的例子，如果不是报错。(当然这只是一个例子而已。。。)</p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482318703701.png\" alt=\"image\"></p>\n<h2 id=\"动手写Pass\"><a href=\"#动手写Pass\" class=\"headerlink\" title=\"动手写Pass\"></a>动手写Pass</h2><h3 id=\"一个简单的Pass\"><a href=\"#一个简单的Pass\" class=\"headerlink\" title=\"一个简单的Pass\"></a>一个简单的Pass</h3><p>前面我们说到，Pass就是LLVM系统转化和优化的工作的一个节点，当然我们也可以写一个这样的节点去做一些自己的优化工作或者其它的操作。下面我们来看一下一个简单Pass的编写流程：</p>\n<p>1.创建头文件  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd llvm/include/llvm/Transforms/</div><div class=\"line\">mkdir Obfuscation</div><div class=\"line\">cd Obfuscation</div><div class=\"line\">touch SimplePass.h</div></pre></td></tr></table></figure>\n<p>写入内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;llvm/IR/Function.h&quot;</div><div class=\"line\">#include &quot;llvm/Pass.h&quot;</div><div class=\"line\">#include &quot;llvm/Support/raw_ostream.h&quot;</div><div class=\"line\">#include &quot;llvm/IR/Intrinsics.h&quot;</div><div class=\"line\">#include &quot;llvm/IR/Instructions.h&quot;</div><div class=\"line\">#include &quot;llvm/IR/LegacyPassManager.h&quot;</div><div class=\"line\">#include &quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</div><div class=\"line\"></div><div class=\"line\">// Namespace</div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">namespace llvm &#123;</div><div class=\"line\">\tPass *createSimplePass(bool flag);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.创建源文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd llvm/lib/Transforms/</div><div class=\"line\">mkdir Obfuscation</div><div class=\"line\">cd Obfuscation</div><div class=\"line\"></div><div class=\"line\">touch CMakeLists.txt</div><div class=\"line\">touch LLVMBuild.txt</div><div class=\"line\">touch SimplePass.cpp</div></pre></td></tr></table></figure>\n<p>CMakeLists.txt:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_llvm_loadable_module(LLVMObfuscation</div><div class=\"line\">  SimplePass.cpp</div><div class=\"line\">  </div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">  add_dependencies(LLVMObfuscation intrinsics_gen)</div></pre></td></tr></table></figure>\n<p>LLVMBuild.txt:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[component_0]</div><div class=\"line\">type = Library</div><div class=\"line\">name = Obfuscation</div><div class=\"line\">parent = Transforms</div><div class=\"line\">library_name = Obfuscation</div></pre></td></tr></table></figure>\n<p>SimplePass.cpp:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;llvm/Transforms/Obfuscation/SimplePass.h&quot;</div><div class=\"line\"></div><div class=\"line\">using namespace llvm;</div><div class=\"line\"></div><div class=\"line\">namespace &#123;</div><div class=\"line\">    struct SimplePass : public FunctionPass &#123;</div><div class=\"line\">        static char ID; // Pass identification, replacement for typeid</div><div class=\"line\">        bool flag;</div><div class=\"line\">         </div><div class=\"line\">        SimplePass() : FunctionPass(ID) &#123;&#125;</div><div class=\"line\">        SimplePass(bool flag) : FunctionPass(ID) &#123;</div><div class=\"line\">        \tthis-&gt;flag = flag;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        bool runOnFunction(Function &amp;F) override &#123;</div><div class=\"line\">        \tif(this-&gt;flag)&#123;</div><div class=\"line\">                Function *tmp = &amp;F;</div><div class=\"line\">                // 遍历函数中的所有基本块</div><div class=\"line\">                for (Function::iterator bb = tmp-&gt;begin(); bb != tmp-&gt;end(); ++bb) &#123;</div><div class=\"line\">                    // 遍历基本块中的每条指令</div><div class=\"line\">                    for (BasicBlock::iterator inst = bb-&gt;begin(); inst != bb-&gt;end(); ++inst) &#123;</div><div class=\"line\">                        // 是否是add指令</div><div class=\"line\">                        if (inst-&gt;isBinaryOp()) &#123;</div><div class=\"line\">                            if (inst-&gt;getOpcode() == Instruction::Add) &#123;</div><div class=\"line\">                                ob_add(cast&lt;BinaryOperator&gt;(inst));</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        // a+b === a-(-b)</div><div class=\"line\">        void ob_add(BinaryOperator *bo) &#123;</div><div class=\"line\">            BinaryOperator *op = NULL;</div><div class=\"line\">             </div><div class=\"line\">            if (bo-&gt;getOpcode() == Instruction::Add) &#123;</div><div class=\"line\">                // 生成 (－b)</div><div class=\"line\">                op = BinaryOperator::CreateNeg(bo-&gt;getOperand(1), &quot;&quot;, bo);</div><div class=\"line\">                // 生成 a-(-b)</div><div class=\"line\">                op = BinaryOperator::Create(Instruction::Sub, bo-&gt;getOperand(0), op, &quot;&quot;, bo);</div><div class=\"line\">                 </div><div class=\"line\">                op-&gt;setHasNoSignedWrap(bo-&gt;hasNoSignedWrap());</div><div class=\"line\">                op-&gt;setHasNoUnsignedWrap(bo-&gt;hasNoUnsignedWrap());</div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">            // 替换所有出现该指令的地方</div><div class=\"line\">            bo-&gt;replaceAllUsesWith(op);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">char SimplePass::ID = 0;</div><div class=\"line\"> </div><div class=\"line\">// 注册pass 命令行选项显示为simplepass</div><div class=\"line\">static RegisterPass&lt;SimplePass&gt; X(&quot;simplepass&quot;, &quot;this is a Simple Pass&quot;);</div><div class=\"line\">Pass *llvm::createSimplePass() &#123; return new SimplePass(); &#125;</div></pre></td></tr></table></figure>\n<p>修改<code>.../Transforms/LLVMBuild.txt</code>, 加上刚刚写的模块<code>Obfuscation</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">subdirectories = Coroutines IPO InstCombine Instrumentation Scalar Utils Vectorize ObjCARC Obfuscation</div></pre></td></tr></table></figure>\n<p>修改<code>.../Transforms/CMakeLists.txt</code>,  加上刚刚写的模块<code>Obfuscation</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_subdirectory(Obfuscation)</div></pre></td></tr></table></figure>\n<p>编译生成：<code>LLVMSimplePass.dylib</code></p>\n<p>因为Pass是作用于中间代码，所以我们首先要生成一份中间代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -emit-llvm -c test.c -o test.bc</div></pre></td></tr></table></figure>\n<p>然后加载Pass优化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">../build/bin/opt -load ../build/lib/LLVMSimplePass.dylib -test &lt; test.bc &gt; after_test.bc</div></pre></td></tr></table></figure>\n<p>对比中间代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">llvm-dis test.bc -o test.ll</div><div class=\"line\">llvm-dis after_test.bc -o after_test.ll</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">test.ll</div><div class=\"line\">......</div><div class=\"line\">entry:</div><div class=\"line\">  %retval = alloca i32, align 4</div><div class=\"line\">  %a = alloca i32, align 4</div><div class=\"line\">  %b = alloca i32, align 4</div><div class=\"line\">  %c = alloca i32, align 4</div><div class=\"line\">  store i32 0, i32* %retval, align 4</div><div class=\"line\">  store i32 3, i32* %a, align 4</div><div class=\"line\">  store i32 4, i32* %b, align 4</div><div class=\"line\">  %0 = load i32, i32* %a, align 4</div><div class=\"line\">  %1 = load i32, i32* %b, align 4</div><div class=\"line\">  %add = add nsw i32 %0, %1</div><div class=\"line\">  store i32 %add, i32* %c, align 4</div><div class=\"line\">  %2 = load i32, i32* %c, align 4</div><div class=\"line\">  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %2)</div><div class=\"line\">  ret i32 0</div><div class=\"line\">&#125;</div><div class=\"line\">......</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">after_test.ll</div><div class=\"line\">......</div><div class=\"line\">entry:</div><div class=\"line\">  %retval = alloca i32, align 4</div><div class=\"line\">  %a = alloca i32, align 4</div><div class=\"line\">  %b = alloca i32, align 4</div><div class=\"line\">  %c = alloca i32, align 4</div><div class=\"line\">  store i32 0, i32* %retval, align 4</div><div class=\"line\">  store i32 3, i32* %a, align 4</div><div class=\"line\">  store i32 4, i32* %b, align 4</div><div class=\"line\">  %0 = load i32, i32* %a, align 4</div><div class=\"line\">  %1 = load i32, i32* %b, align 4</div><div class=\"line\">  %2 = sub i32 0, %1</div><div class=\"line\">  %3 = sub nsw i32 %0, %2</div><div class=\"line\">  %add = add nsw i32 %0, %1</div><div class=\"line\">  store i32 %3, i32* %c, align 4</div><div class=\"line\">  %4 = load i32, i32* %c, align 4</div><div class=\"line\">  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %4)</div><div class=\"line\">  ret i32 0</div><div class=\"line\">&#125;</div><div class=\"line\">......</div></pre></td></tr></table></figure>\n<p>这里写的Pass只是把a+b简单的替换成了a-(-b),只是一个演示，怎么去写自己的Pass，并且作用于代码。</p>\n<h3 id=\"将Pass加入PassManager管理\"><a href=\"#将Pass加入PassManager管理\" class=\"headerlink\" title=\"将Pass加入PassManager管理\"></a>将Pass加入PassManager管理</h3><p>上面我们是单独去加载Pass动态库，这里我们将Pass加入PassManager，这样我们就可以直接通过clang的参数去加载我们的Pass了。</p>\n<p>首先在<code>llvm/lib/Transforms/IPO/PassManagerBuilder.cpp</code>添加头文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;llvm/Transforms/Obfuscation/SimplePass.h&quot;</div></pre></td></tr></table></figure>\n<p>然后添加如下语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">static cl::opt&lt;bool&gt; SimplePass(&quot;simplepass&quot;, cl::init(false),</div><div class=\"line\">                           cl::desc(&quot;Enable simple pass&quot;));</div></pre></td></tr></table></figure>\n<p>然后在<code>populateModulePassManager</code>这个函数中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MPM.add(createSimplePass(SimplePass));</div></pre></td></tr></table></figure>\n<p>最后在IPO这个目录的<code>LLVMBuild.txt</code>中添加库的支持，否则在编译的时候会提示链接错误。具体内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">required_libraries = Analysis Core InstCombine IRReader Linker Object ProfileData Scalar Support TransformUtils Vectorize Obfuscation</div></pre></td></tr></table></figure>\n<p>修改Pass的CMakeLists.txt为静态库形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_llvm_library(LLVMObfuscation</div><div class=\"line\">  SimplePass.cpp</div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">add_dependencies(LLVMObfuscation intrinsics_gen)</div></pre></td></tr></table></figure>\n<p>最后再编译一次。</p>\n<p>那么我们可以这么去调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">../build/bin/clang -mllvm -simplepass test.c -o after_test</div></pre></td></tr></table></figure>\n<p>基于Pass，我们可以做什么？ 我们可以编写自己的Pass去混淆代码，以增加他人反编译的难度。</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320959711.png\"></center>\n\n<p>我们可以把代码左上角的样子，变成右下角的样子，甚至更加复杂~ </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面说了那么说，来总结一下：</p>\n<p>1.LLVM编译一个源文件的过程：</p>\n<p>预处理 -&gt; 词法分析 -&gt; Token -&gt; 语法分析 -&gt; AST -&gt; 代码生成 -&gt; LLVM IR -&gt; 优化 -&gt; 生成汇编代码 -&gt; Link -&gt; 目标文件</p>\n<p>2.基于LLVM，我们可以做什么？</p>\n<ol>\n<li>做语法树分析，实现语言转换OC转Swift、JS or 其它语言，字符串加密。</li>\n<li>编写ClangPlugin，命名规范，代码规范，扩展功能。</li>\n<li>编写Pass，代码混淆优化。</li>\n</ol>\n<p>这篇只是一个简单的入门介绍，个人还需要深入去学习LLVM，再给大家分享，如有问题，欢迎拍砖~  </p>\n","excerpt":"<p>只要你和代码打交道，了解编译器的工作流程和原理定会让你受益无穷，无论是分析程序，还是基于它写自己的插件，甚至学习一门全新的语音。通过本文，将带你了解LLVM，并使用LLVM来完成一些有意思的事情。","more":"</p>\n<h2 id=\"1-什么是LLVM？\"><a href=\"#1-什么是LLVM？\" class=\"headerlink\" title=\"1. 什么是LLVM？\"></a>1. 什么是LLVM？</h2><blockquote>\n<p>The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.</p>\n</blockquote>\n<p>简单来说，LLVM项目是一系列分模块、可重用的编译工具链。它提供了一种代码编写良好的中间表示(IR)，可以作为多种语言的后端，还可以提供与变成语言无关的优化和针对多种cpu的代码生成功能。</p>\n<p>先来看下LLVM架构的主要组成部分：</p>\n<ul>\n<li>前端：前端用来获取源代码然后将它转变为某种中间表示，我们可以选择不同的编译器来作为LLVM的前端，如gcc，clang。</li>\n<li>Pass(通常翻译为“流程”)：Pass用来将程序的中间表示之间相互变换。一般情况下，Pass可以用来优化代码，这部分通常是我们关注的部分。</li>\n<li>后端：后端用来生成实际的机器码。</li>\n</ul>\n<p>虽然如今大多数编译器都采用的是这种架构，但是LLVM不同的就是对于不同的语言它都提供了同一种中间表示。传统的编译器的架构如下:</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136450962.png\"/></center>\n\n<p>LLVM的架构如下：</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482136601642.png\"/></center>\n\n<p>当编译器需要支持多种源代码和目标架构时，基于LLVM的架构，设计一门新的语言只需要去实现一个新的前端就行了，支持新的后端架构也只需要实现一个新的后端就行了。其它部分完成可以复用，就不用再重新设计一次了。</p>\n<h2 id=\"2-安装编译LLVM\"><a href=\"#2-安装编译LLVM\" class=\"headerlink\" title=\"2. 安装编译LLVM\"></a>2. 安装编译LLVM</h2><p>这里使用clang作为前端:</p>\n<ol>\n<li><p>直接从官网下载:<a href=\"http://releases.llvm.org/download.html\">http://releases.llvm.org/download.html\n</a></p>\n</li>\n<li><p>svn获取</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm</div><div class=\"line\">cd llvm/tools</div><div class=\"line\">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang</div><div class=\"line\">cd ../projects</div><div class=\"line\">svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt</div><div class=\"line\">cd ../tools/clang/tools</div><div class=\"line\">svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra</div></pre></td></tr></table></figure>\n<ol>\n<li>git获取</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone http://llvm.org/git/llvm.git</div><div class=\"line\">cd llvm/tools</div><div class=\"line\">git clone http://llvm.org/git/clang.git</div><div class=\"line\">cd ../projects</div><div class=\"line\">git clone http://llvm.org/git/compiler-rt.git</div><div class=\"line\">cd ../tools/clang/tools</div><div class=\"line\">git clone http://llvm.org/git/clang-tools-extra.git</div></pre></td></tr></table></figure>\n<p>最新的LLVM只支持cmake来编译了，首先安装cmake。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install cmake</div></pre></td></tr></table></figure>\n<p>编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir build</div><div class=\"line\">cmake /path/to/llvm/source</div><div class=\"line\">cmake --build .</div></pre></td></tr></table></figure>\n<p>编译时间比较长，而且编译结果会生成20G左右的文件。</p>\n<p>编译完成后，就能在<code>build/bin/</code>目录下面找到生成的工具了。</p>\n<h2 id=\"3-从源码到可执行文件\"><a href=\"#3-从源码到可执行文件\" class=\"headerlink\" title=\"3. 从源码到可执行文件\"></a>3. 从源码到可执行文件</h2><p>我们在开发的时候的时候，如果想要生成一个可执行文件或应用，我们点击run就完事了，那么在点击run之后编译器背后又做了哪些事情呢？</p>\n<p>我们先来一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">#define TEN 10</div><div class=\"line\"></div><div class=\"line\">int main()&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int numberOne = TEN;</div><div class=\"line\">        int numberTwo = 8;</div><div class=\"line\">        NSString* name = [[NSString alloc] initWithUTF8String:&quot;AloneMonkey&quot;];</div><div class=\"line\">        int age = numberOne + numberTwo;</div><div class=\"line\">        NSLog(@&quot;Hello, %@, Age: %d&quot;, name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这个文件，我们可以通过命令行直接编译，然后链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcrun -sdk iphoneos clang -arch armv7 -F Foundation -fobjc-arc -c main.m -o main.o</div><div class=\"line\">xcrun -sdk iphoneos clang main.o -arch armv7 -fobjc-arc -framework Foundation -o main</div></pre></td></tr></table></figure>\n<p>拷贝到手机运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">monkeyde-iPhone:/tmp root# ./main</div><div class=\"line\">2016-12-19 17:16:34.654 main[2164:213100] Hello, AloneMonkey, Age: 18</div></pre></td></tr></table></figure>\n<p>大家不会以为就这样就完了吧，当然不是，我们要继续深入剖析。</p>\n<h3 id=\"3-1-预处理（Preprocess）\"><a href=\"#3-1-预处理（Preprocess）\" class=\"headerlink\" title=\"3.1 预处理（Preprocess）\"></a>3.1 预处理（Preprocess）</h3><p>这部分包括macro宏的展开，import/include头文件的导入，以及#if等处理。</p>\n<p>可以通过执行以下命令，来告诉clang只执行到预处理这一步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -E main.m</div></pre></td></tr></table></figure>\n<p>执行完这个命令之后，我们会发现导入了很多的头文件内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">......</div><div class=\"line\"># 1 &quot;/System/Library/Frameworks/Foundation.framework/Headers/FoundationLegacySwiftCompatibility.h&quot; 1 3</div><div class=\"line\"># 185 &quot;/System/Library/Frameworks/Foundation.framework/Headers/Foundation.h&quot; 2 3</div><div class=\"line\"># 2 &quot;main.m&quot; 2</div><div class=\"line\"></div><div class=\"line\">int main()&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int numberOne = 10;</div><div class=\"line\">        int numberTwo = 8;</div><div class=\"line\">        NSString* name = [[NSString alloc] initWithUTF8String:&quot;AloneMonkey&quot;];</div><div class=\"line\">        int age = numberOne + numberTwo;</div><div class=\"line\">        NSLog(@&quot;Hello, %@, Age: %d&quot;, name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到上面的预处理已经把宏替换了，并且导入了头文件。但是这样的话会引入很多不会去改变的系统库比如Foundation，所以有了pch预处理文件，可以在这里去引入一些通用的头文件。</p>\n<p>后来Xcode新建的项目里面去掉了pch文件，引入了moduels的概念，把一些通用的库打成modules的形式，然后导入，默认会加上-fmodules参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -E -fmodules main.m</div></pre></td></tr></table></figure>\n<p>这样的话，只需要@import一下就能导入对应库的modules模块了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import Foundation; </div><div class=\"line\">int main()&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int numberOne = 10;</div><div class=\"line\">        int numberTwo = 8;</div><div class=\"line\">        NSString* name = [[NSString alloc] initWithUTF8String:&quot;AloneMonkey&quot;];</div><div class=\"line\">        int age = numberOne + numberTwo;</div><div class=\"line\">        NSLog(@&quot;Hello, %@, Age: %d&quot;, name, age);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-词法分析-Lexical-Analysis\"><a href=\"#3-2-词法分析-Lexical-Analysis\" class=\"headerlink\" title=\"3.2 词法分析 (Lexical Analysis)\"></a>3.2 词法分析 (Lexical Analysis)</h3><p>在预处理之后，就要进行词法分析了，将预处理过的代码转化成一个个Token，比如左括号、右括号、等于、字符串等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -fmodules -fsyntax-only -Xclang -dump-tokens main.m</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994028068.png\" alt=\"image\"></p>\n<h3 id=\"3-3-语法分析-Semantic-Analysis\"><a href=\"#3-3-语法分析-Semantic-Analysis\" class=\"headerlink\" title=\"3.3 语法分析 (Semantic Analysis)\"></a>3.3 语法分析 (Semantic Analysis)</h3><p>根据当前语言的语法，验证语法是否正确，并将所有节点组合成抽象语法树(AST)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994071651.png\" alt=\"image\"></p>\n<p>语法树直观图:</p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482150626825.png\" alt=\"image\"></p>\n<h3 id=\"3-4-IR代码生成-CodeGen\"><a href=\"#3-4-IR代码生成-CodeGen\" class=\"headerlink\" title=\"3.4 IR代码生成 (CodeGen)\"></a>3.4 IR代码生成 (CodeGen)</h3><p>CodeGen负责将语法树从顶至下遍历，翻译成LLVM IR，LLVM IR是Frontend的输出，也是LLVM Backerend的输入，桥接前后端。</p>\n<p>可以在中间代码层次去做一些优化工作，我们在Xcode的编译设置里面也可以设置优化级别<code>-O1</code>,<code>-O3</code>,<code>-Os</code>。 还可以去写一些自己的Pass，这里需要解释一下什么是Pass。</p>\n<p>Pass就是LLVM系统转化和优化的工作的一个节点，每个节点做一些工作，这些工作加起来就构成了LLVM整个系统的优化和转化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -S -fobjc-arc -emit-llvm main.m -o main.ll</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994093995.png\" alt=\"image\"></p>\n<h3 id=\"3-5-生成字节码-LLVM-Bitcode\"><a href=\"#3-5-生成字节码-LLVM-Bitcode\" class=\"headerlink\" title=\"3.5 生成字节码 (LLVM Bitcode)\"></a>3.5 生成字节码 (LLVM Bitcode)</h3><p>我们在Xcode7中默认生成bitcode就是这种的中间形式存在， 开启了bitcode，那么苹果后台拿到的就是这种中间代码，苹果可以对bitcode做一个进一步的优化，如果有新的后端架构，仍然可以用这份bitcode去生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -emit-llvm -c main.m -o main.bc</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218230417.png\" alt=\"image\"></p>\n<h3 id=\"生成相关汇编\"><a href=\"#生成相关汇编\" class=\"headerlink\" title=\"生成相关汇编\"></a>生成相关汇编</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -S -fobjc-arc main.m -o main.s</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994171109.png\" alt=\"image\"></p>\n<h3 id=\"生成目标文件\"><a href=\"#生成目标文件\" class=\"headerlink\" title=\"生成目标文件\"></a>生成目标文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -fmodules -c main.m -o main.o</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482218636504.png\" alt=\"image\"></p>\n<h3 id=\"生成可执行文件\"><a href=\"#生成可执行文件\" class=\"headerlink\" title=\"生成可执行文件\"></a>生成可执行文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang main.o -o main</div><div class=\"line\">./main</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-12-20 15:25:42.299 main[8941:327306] Hello, AloneMonkey, Age: 18</div></pre></td></tr></table></figure>\n<h3 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h3><p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482219005958.png\" alt=\"image\"></p>\n<h2 id=\"可以用Clang做什么？\"><a href=\"#可以用Clang做什么？\" class=\"headerlink\" title=\"可以用Clang做什么？\"></a>可以用Clang做什么？</h2><h3 id=\"libclang进行语法分析\"><a href=\"#libclang进行语法分析\" class=\"headerlink\" title=\"libclang进行语法分析\"></a>libclang进行语法分析</h3><p>可以使用libclang里面提供的方法对源文件进行语法分析，分析它的语法树，遍历语法树上面的每一个节点。可以用于检查拼写错误，或者做字符串加密。</p>\n<p>来看一段代码的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">void *hand = dlopen(&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib&quot;,RTLD_LAZY);</div><div class=\"line\">        </div><div class=\"line\">//初始化函数指针</div><div class=\"line\">initlibfunclist(hand);</div><div class=\"line\"></div><div class=\"line\">CXIndex cxindex = myclang_createIndex(1, 1);</div><div class=\"line\"></div><div class=\"line\">const char *filename = &quot;/path/to/filename&quot;;</div><div class=\"line\"></div><div class=\"line\">int index = 0;</div><div class=\"line\"></div><div class=\"line\">const char ** new_command = malloc(10240);</div><div class=\"line\"></div><div class=\"line\">NSMutableString *mus = [NSMutableString stringWithString:@&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch armv7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk&quot;]; </div><div class=\"line\"></div><div class=\"line\">NSArray *arr = [mus componentsSeparatedByString:@&quot; &quot;];</div><div class=\"line\"></div><div class=\"line\">for (NSString *tmp in arr) &#123;</div><div class=\"line\">    new_command[index++] = [tmp UTF8String];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">nameArr = [[NSMutableArray alloc] initWithCapacity:10];</div><div class=\"line\"></div><div class=\"line\">TU = myclang_parseTranslationUnit(cxindex, filename, new_command, index, NULL, 0, myclang_defaultEditingTranslationUnitOptions());</div><div class=\"line\"></div><div class=\"line\">CXCursor rootCursor = myclang_getTranslationUnitCursor(TU);</div><div class=\"line\"></div><div class=\"line\">myclang_visitChildren(rootCursor, printVisitor, NULL);</div><div class=\"line\"></div><div class=\"line\">myclang_disposeTranslationUnit(TU);</div><div class=\"line\">myclang_disposeIndex(cxindex);</div><div class=\"line\">free(new_command);</div><div class=\"line\"></div><div class=\"line\">dlclose(hand);</div></pre></td></tr></table></figure>\n<p>然后我们就可以在<code>printVisitor</code>这个函数里面去遍历输入文件的语法树了。</p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994195691.png\" alt=\"image\"></p>\n<p>我们也通过通过python去调用用clang：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install clang</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994863704.png\" alt=\"image\"></p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994879267.png\" alt=\"image\"></p>\n<p>那么基于语法树的分析，我们可以针对字符串做加密：</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320827975.png\"/></center>\n\n<p>从左上角的明文字符串，处理成右下角的介个样子~</p>\n<h3 id=\"LibTooling\"><a href=\"#LibTooling\" class=\"headerlink\" title=\"LibTooling\"></a>LibTooling</h3><p>对语法树有完全的控制权，可以作为一个单独的命令使用，如：<code>clang-format</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang-format main.m</div></pre></td></tr></table></figure>\n<p>我们也可以自己写一个这样的工具去遍历、访问、甚至修改语法树。 目录:<code>llvm/tools/clang/tools</code></p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482994222169.png\" alt=\"image\"></p>\n<p>上面的代码通过遍历语法树，去修改里面的方法名和返回变量名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">before:</div><div class=\"line\">void do_math(int *x) &#123;</div><div class=\"line\">    *x += 5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(void) &#123;</div><div class=\"line\">    int result = -1, val = 4;</div><div class=\"line\">    do_math(&amp;val);</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">after:</div><div class=\"line\">** Rewrote function def: do_math</div><div class=\"line\">** Rewrote function call</div><div class=\"line\">** Rewrote ReturnStmt</div><div class=\"line\"></div><div class=\"line\">Found 2 functions.</div><div class=\"line\"></div><div class=\"line\">void add5(int *x) &#123;</div><div class=\"line\">    *x += 5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(void) &#123;</div><div class=\"line\">    int result = -1, val = 4;</div><div class=\"line\">    add5(&amp;val);</div><div class=\"line\">    return val;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么，我们看到<code>LibTooling</code>对代码的语法树有完全的控制，那么我们可以基于它去检查命名的规范，甚至做一个代码的转换，比如实现OC转Swift。</p>\n<h3 id=\"ClangPlugin\"><a href=\"#ClangPlugin\" class=\"headerlink\" title=\"ClangPlugin\"></a>ClangPlugin</h3><p>对语法树有完全的控制权，作为插件注入到编译流程中，可以影响build和决定编译过程。目录:<code>llvm/tools/clang/examples</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;clang/Driver/Options.h&quot;</div><div class=\"line\">#include &quot;clang/AST/AST.h&quot;</div><div class=\"line\">#include &quot;clang/AST/ASTContext.h&quot;</div><div class=\"line\">#include &quot;clang/AST/ASTConsumer.h&quot;</div><div class=\"line\">#include &quot;clang/AST/RecursiveASTVisitor.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/ASTConsumers.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/FrontendActions.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/CompilerInstance.h&quot;</div><div class=\"line\">#include &quot;clang/Frontend/FrontendPluginRegistry.h&quot;</div><div class=\"line\">#include &quot;clang/Rewrite/Core/Rewriter.h&quot;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\">using namespace clang;</div><div class=\"line\">using namespace llvm;</div><div class=\"line\"></div><div class=\"line\">Rewriter rewriter;</div><div class=\"line\">int numFunctions = 0;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class ExampleVisitor : public RecursiveASTVisitor&lt;ExampleVisitor&gt; &#123;</div><div class=\"line\">private:</div><div class=\"line\">    ASTContext *astContext; // used for getting additional AST info</div><div class=\"line\"></div><div class=\"line\">public:</div><div class=\"line\">    explicit ExampleVisitor(CompilerInstance *CI) </div><div class=\"line\">      : astContext(&amp;(CI-&gt;getASTContext())) // initialize private members</div><div class=\"line\">    &#123;</div><div class=\"line\">        rewriter.setSourceMgr(astContext-&gt;getSourceManager(), astContext-&gt;getLangOpts());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    virtual bool VisitFunctionDecl(FunctionDecl *func) &#123;</div><div class=\"line\">        numFunctions++;</div><div class=\"line\">        string funcName = func-&gt;getNameInfo().getName().getAsString();</div><div class=\"line\">        if (funcName == &quot;do_math&quot;) &#123;</div><div class=\"line\">            rewriter.ReplaceText(func-&gt;getLocation(), funcName.length(), &quot;add5&quot;);</div><div class=\"line\">            errs() &lt;&lt; &quot;** Rewrote function def: &quot; &lt;&lt; funcName &lt;&lt; &quot;\\n&quot;;</div><div class=\"line\">        &#125;    </div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    virtual bool VisitStmt(Stmt *st) &#123;</div><div class=\"line\">        if (ReturnStmt *ret = dyn_cast&lt;ReturnStmt&gt;(st)) &#123;</div><div class=\"line\">            rewriter.ReplaceText(ret-&gt;getRetValue()-&gt;getLocStart(), 6, &quot;val&quot;);</div><div class=\"line\">            errs() &lt;&lt; &quot;** Rewrote ReturnStmt\\n&quot;;</div><div class=\"line\">        &#125;        </div><div class=\"line\">        if (CallExpr *call = dyn_cast&lt;CallExpr&gt;(st)) &#123;</div><div class=\"line\">            rewriter.ReplaceText(call-&gt;getLocStart(), 7, &quot;add5&quot;);</div><div class=\"line\">            errs() &lt;&lt; &quot;** Rewrote function call\\n&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class ExampleASTConsumer : public ASTConsumer &#123;</div><div class=\"line\">private:</div><div class=\"line\">    ExampleVisitor *visitor; // doesn&apos;t have to be private</div><div class=\"line\"></div><div class=\"line\">public:</div><div class=\"line\">    // override the constructor in order to pass CI</div><div class=\"line\">    explicit ExampleASTConsumer(CompilerInstance *CI):</div><div class=\"line\">        visitor(new ExampleVisitor(CI)) &#123; &#125; // initialize the visitor</div><div class=\"line\"></div><div class=\"line\">    // override this to call our ExampleVisitor on the entire source file</div><div class=\"line\">    virtual void HandleTranslationUnit(ASTContext &amp;Context) &#123;</div><div class=\"line\">        /* we can use ASTContext to get the TranslationUnitDecl, which is</div><div class=\"line\">             a single Decl that collectively represents the entire source file */</div><div class=\"line\">        visitor-&gt;TraverseDecl(Context.getTranslationUnitDecl());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class PluginExampleAction : public PluginASTAction &#123;</div><div class=\"line\">protected:</div><div class=\"line\">    // this gets called by Clang when it invokes our Plugin</div><div class=\"line\">    // Note that unique pointer is used here.</div><div class=\"line\">    std::unique_ptr&lt;ASTConsumer&gt; CreateASTConsumer(CompilerInstance &amp;CI, StringRef file) &#123;</div><div class=\"line\">        return llvm::make_unique&lt;ExampleASTConsumer&gt;(&amp;CI);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // implement this function if you want to parse custom cmd-line args</div><div class=\"line\">    bool ParseArgs(const CompilerInstance &amp;CI, const vector&lt;string&gt; &amp;args) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">static FrontendPluginRegistry::Add&lt;PluginExampleAction&gt; X(&quot;-example-plugin&quot;, &quot;simple Plugin example&quot;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -Xclang -load -Xclang ../build/lib/PluginExample.dylib -Xclang -plugin -Xclang -example-plugin -c testPlugin.c</div><div class=\"line\"></div><div class=\"line\">** Rewrote function def: do_math</div><div class=\"line\">** Rewrote function call</div><div class=\"line\">** Rewrote ReturnStmt</div></pre></td></tr></table></figure>\n<p>我们可以基于ClangPlugin做些什么事情呢？我们可以用来定义一些编码规范，比如代码风格检查，命名检查等等。下面是我写的判断类名前两个字母是不是大写的例子，如果不是报错。(当然这只是一个例子而已。。。)</p>\n<p><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482318703701.png\" alt=\"image\"></p>\n<h2 id=\"动手写Pass\"><a href=\"#动手写Pass\" class=\"headerlink\" title=\"动手写Pass\"></a>动手写Pass</h2><h3 id=\"一个简单的Pass\"><a href=\"#一个简单的Pass\" class=\"headerlink\" title=\"一个简单的Pass\"></a>一个简单的Pass</h3><p>前面我们说到，Pass就是LLVM系统转化和优化的工作的一个节点，当然我们也可以写一个这样的节点去做一些自己的优化工作或者其它的操作。下面我们来看一下一个简单Pass的编写流程：</p>\n<p>1.创建头文件  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd llvm/include/llvm/Transforms/</div><div class=\"line\">mkdir Obfuscation</div><div class=\"line\">cd Obfuscation</div><div class=\"line\">touch SimplePass.h</div></pre></td></tr></table></figure>\n<p>写入内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;llvm/IR/Function.h&quot;</div><div class=\"line\">#include &quot;llvm/Pass.h&quot;</div><div class=\"line\">#include &quot;llvm/Support/raw_ostream.h&quot;</div><div class=\"line\">#include &quot;llvm/IR/Intrinsics.h&quot;</div><div class=\"line\">#include &quot;llvm/IR/Instructions.h&quot;</div><div class=\"line\">#include &quot;llvm/IR/LegacyPassManager.h&quot;</div><div class=\"line\">#include &quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</div><div class=\"line\"></div><div class=\"line\">// Namespace</div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">namespace llvm &#123;</div><div class=\"line\">\tPass *createSimplePass(bool flag);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.创建源文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd llvm/lib/Transforms/</div><div class=\"line\">mkdir Obfuscation</div><div class=\"line\">cd Obfuscation</div><div class=\"line\"></div><div class=\"line\">touch CMakeLists.txt</div><div class=\"line\">touch LLVMBuild.txt</div><div class=\"line\">touch SimplePass.cpp</div></pre></td></tr></table></figure>\n<p>CMakeLists.txt:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_llvm_loadable_module(LLVMObfuscation</div><div class=\"line\">  SimplePass.cpp</div><div class=\"line\">  </div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">  add_dependencies(LLVMObfuscation intrinsics_gen)</div></pre></td></tr></table></figure>\n<p>LLVMBuild.txt:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[component_0]</div><div class=\"line\">type = Library</div><div class=\"line\">name = Obfuscation</div><div class=\"line\">parent = Transforms</div><div class=\"line\">library_name = Obfuscation</div></pre></td></tr></table></figure>\n<p>SimplePass.cpp:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;llvm/Transforms/Obfuscation/SimplePass.h&quot;</div><div class=\"line\"></div><div class=\"line\">using namespace llvm;</div><div class=\"line\"></div><div class=\"line\">namespace &#123;</div><div class=\"line\">    struct SimplePass : public FunctionPass &#123;</div><div class=\"line\">        static char ID; // Pass identification, replacement for typeid</div><div class=\"line\">        bool flag;</div><div class=\"line\">         </div><div class=\"line\">        SimplePass() : FunctionPass(ID) &#123;&#125;</div><div class=\"line\">        SimplePass(bool flag) : FunctionPass(ID) &#123;</div><div class=\"line\">        \tthis-&gt;flag = flag;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        bool runOnFunction(Function &amp;F) override &#123;</div><div class=\"line\">        \tif(this-&gt;flag)&#123;</div><div class=\"line\">                Function *tmp = &amp;F;</div><div class=\"line\">                // 遍历函数中的所有基本块</div><div class=\"line\">                for (Function::iterator bb = tmp-&gt;begin(); bb != tmp-&gt;end(); ++bb) &#123;</div><div class=\"line\">                    // 遍历基本块中的每条指令</div><div class=\"line\">                    for (BasicBlock::iterator inst = bb-&gt;begin(); inst != bb-&gt;end(); ++inst) &#123;</div><div class=\"line\">                        // 是否是add指令</div><div class=\"line\">                        if (inst-&gt;isBinaryOp()) &#123;</div><div class=\"line\">                            if (inst-&gt;getOpcode() == Instruction::Add) &#123;</div><div class=\"line\">                                ob_add(cast&lt;BinaryOperator&gt;(inst));</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        // a+b === a-(-b)</div><div class=\"line\">        void ob_add(BinaryOperator *bo) &#123;</div><div class=\"line\">            BinaryOperator *op = NULL;</div><div class=\"line\">             </div><div class=\"line\">            if (bo-&gt;getOpcode() == Instruction::Add) &#123;</div><div class=\"line\">                // 生成 (－b)</div><div class=\"line\">                op = BinaryOperator::CreateNeg(bo-&gt;getOperand(1), &quot;&quot;, bo);</div><div class=\"line\">                // 生成 a-(-b)</div><div class=\"line\">                op = BinaryOperator::Create(Instruction::Sub, bo-&gt;getOperand(0), op, &quot;&quot;, bo);</div><div class=\"line\">                 </div><div class=\"line\">                op-&gt;setHasNoSignedWrap(bo-&gt;hasNoSignedWrap());</div><div class=\"line\">                op-&gt;setHasNoUnsignedWrap(bo-&gt;hasNoUnsignedWrap());</div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">            // 替换所有出现该指令的地方</div><div class=\"line\">            bo-&gt;replaceAllUsesWith(op);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">char SimplePass::ID = 0;</div><div class=\"line\"> </div><div class=\"line\">// 注册pass 命令行选项显示为simplepass</div><div class=\"line\">static RegisterPass&lt;SimplePass&gt; X(&quot;simplepass&quot;, &quot;this is a Simple Pass&quot;);</div><div class=\"line\">Pass *llvm::createSimplePass() &#123; return new SimplePass(); &#125;</div></pre></td></tr></table></figure>\n<p>修改<code>.../Transforms/LLVMBuild.txt</code>, 加上刚刚写的模块<code>Obfuscation</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">subdirectories = Coroutines IPO InstCombine Instrumentation Scalar Utils Vectorize ObjCARC Obfuscation</div></pre></td></tr></table></figure>\n<p>修改<code>.../Transforms/CMakeLists.txt</code>,  加上刚刚写的模块<code>Obfuscation</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_subdirectory(Obfuscation)</div></pre></td></tr></table></figure>\n<p>编译生成：<code>LLVMSimplePass.dylib</code></p>\n<p>因为Pass是作用于中间代码，所以我们首先要生成一份中间代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clang -emit-llvm -c test.c -o test.bc</div></pre></td></tr></table></figure>\n<p>然后加载Pass优化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">../build/bin/opt -load ../build/lib/LLVMSimplePass.dylib -test &lt; test.bc &gt; after_test.bc</div></pre></td></tr></table></figure>\n<p>对比中间代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">llvm-dis test.bc -o test.ll</div><div class=\"line\">llvm-dis after_test.bc -o after_test.ll</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">test.ll</div><div class=\"line\">......</div><div class=\"line\">entry:</div><div class=\"line\">  %retval = alloca i32, align 4</div><div class=\"line\">  %a = alloca i32, align 4</div><div class=\"line\">  %b = alloca i32, align 4</div><div class=\"line\">  %c = alloca i32, align 4</div><div class=\"line\">  store i32 0, i32* %retval, align 4</div><div class=\"line\">  store i32 3, i32* %a, align 4</div><div class=\"line\">  store i32 4, i32* %b, align 4</div><div class=\"line\">  %0 = load i32, i32* %a, align 4</div><div class=\"line\">  %1 = load i32, i32* %b, align 4</div><div class=\"line\">  %add = add nsw i32 %0, %1</div><div class=\"line\">  store i32 %add, i32* %c, align 4</div><div class=\"line\">  %2 = load i32, i32* %c, align 4</div><div class=\"line\">  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %2)</div><div class=\"line\">  ret i32 0</div><div class=\"line\">&#125;</div><div class=\"line\">......</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">after_test.ll</div><div class=\"line\">......</div><div class=\"line\">entry:</div><div class=\"line\">  %retval = alloca i32, align 4</div><div class=\"line\">  %a = alloca i32, align 4</div><div class=\"line\">  %b = alloca i32, align 4</div><div class=\"line\">  %c = alloca i32, align 4</div><div class=\"line\">  store i32 0, i32* %retval, align 4</div><div class=\"line\">  store i32 3, i32* %a, align 4</div><div class=\"line\">  store i32 4, i32* %b, align 4</div><div class=\"line\">  %0 = load i32, i32* %a, align 4</div><div class=\"line\">  %1 = load i32, i32* %b, align 4</div><div class=\"line\">  %2 = sub i32 0, %1</div><div class=\"line\">  %3 = sub nsw i32 %0, %2</div><div class=\"line\">  %add = add nsw i32 %0, %1</div><div class=\"line\">  store i32 %3, i32* %c, align 4</div><div class=\"line\">  %4 = load i32, i32* %c, align 4</div><div class=\"line\">  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %4)</div><div class=\"line\">  ret i32 0</div><div class=\"line\">&#125;</div><div class=\"line\">......</div></pre></td></tr></table></figure>\n<p>这里写的Pass只是把a+b简单的替换成了a-(-b),只是一个演示，怎么去写自己的Pass，并且作用于代码。</p>\n<h3 id=\"将Pass加入PassManager管理\"><a href=\"#将Pass加入PassManager管理\" class=\"headerlink\" title=\"将Pass加入PassManager管理\"></a>将Pass加入PassManager管理</h3><p>上面我们是单独去加载Pass动态库，这里我们将Pass加入PassManager，这样我们就可以直接通过clang的参数去加载我们的Pass了。</p>\n<p>首先在<code>llvm/lib/Transforms/IPO/PassManagerBuilder.cpp</code>添加头文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &quot;llvm/Transforms/Obfuscation/SimplePass.h&quot;</div></pre></td></tr></table></figure>\n<p>然后添加如下语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">static cl::opt&lt;bool&gt; SimplePass(&quot;simplepass&quot;, cl::init(false),</div><div class=\"line\">                           cl::desc(&quot;Enable simple pass&quot;));</div></pre></td></tr></table></figure>\n<p>然后在<code>populateModulePassManager</code>这个函数中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MPM.add(createSimplePass(SimplePass));</div></pre></td></tr></table></figure>\n<p>最后在IPO这个目录的<code>LLVMBuild.txt</code>中添加库的支持，否则在编译的时候会提示链接错误。具体内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">required_libraries = Analysis Core InstCombine IRReader Linker Object ProfileData Scalar Support TransformUtils Vectorize Obfuscation</div></pre></td></tr></table></figure>\n<p>修改Pass的CMakeLists.txt为静态库形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_llvm_library(LLVMObfuscation</div><div class=\"line\">  SimplePass.cpp</div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">add_dependencies(LLVMObfuscation intrinsics_gen)</div></pre></td></tr></table></figure>\n<p>最后再编译一次。</p>\n<p>那么我们可以这么去调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">../build/bin/clang -mllvm -simplepass test.c -o after_test</div></pre></td></tr></table></figure>\n<p>基于Pass，我们可以做什么？ 我们可以编写自己的Pass去混淆代码，以增加他人反编译的难度。</p>\n<center><img src=\"http://7xtdl4.com1.z0.glb.clouddn.com/script_1482320959711.png\"/></center>\n\n<p>我们可以把代码左上角的样子，变成右下角的样子，甚至更加复杂~ </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面说了那么说，来总结一下：</p>\n<p>1.LLVM编译一个源文件的过程：</p>\n<p>预处理 -&gt; 词法分析 -&gt; Token -&gt; 语法分析 -&gt; AST -&gt; 代码生成 -&gt; LLVM IR -&gt; 优化 -&gt; 生成汇编代码 -&gt; Link -&gt; 目标文件</p>\n<p>2.基于LLVM，我们可以做什么？</p>\n<ol>\n<li>做语法树分析，实现语言转换OC转Swift、JS or 其它语言，字符串加密。</li>\n<li>编写ClangPlugin，命名规范，代码规范，扩展功能。</li>\n<li>编写Pass，代码混淆优化。</li>\n</ol>\n<p>这篇只是一个简单的入门介绍，个人还需要深入去学习LLVM，再给大家分享，如有问题，欢迎拍砖~  </p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cixjtm8j20000wl8ltlk5ztme","category_id":"cixjwh4yd00007e8lq4jj405o","_id":"cixjwh4yg00037e8luq4hny4o"}],"PostTag":[{"post_id":"cixjtm8j20000wl8ltlk5ztme","tag_id":"cixjwh4ye00017e8l56sqze5f","_id":"cixjwh4yg00027e8ldebr1e0h"}],"Tag":[{"name":"LLVM","_id":"cixjwh4ye00017e8l56sqze5f"}]}}